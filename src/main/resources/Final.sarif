{
  "version" : "2.1.0",
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "JGit",
        "informationUri" : "https://www.eclipse.org/jgit/",
        "version" : "7.0.0",
        "semanticVersion" : "7.0.0",
        "organization" : "Eclipse Foundation"
      }
    },
    "results" : [ {
      "ruleId" : "Branch Count with Authors",
      "message" : {
        "text" : "See properties for detailed information."
      },
      "properties" : {
        "totalBranchCount" : 2,
        "authors" : [ {
          "author" : "Danila",
          "branches" : [ {
            "branchName" : "refs/heads/main"
          }, {
            "branchName" : "refs/remotes/origin/main"
          } ]
        } ]
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dummy/file/path",
            "uriBaseId" : "SRCROOT",
            "index" : 0
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1
          }
        }
      } ]
    }, {
      "ruleId" : "Commit Frequency",
      "message" : {
        "text" : "See properties for detailed information."
      },
      "properties" : {
        "0" : {
          "date" : "2024-12-14",
          "commits" : 2
        },
        "1" : {
          "date" : "2024-12-15",
          "commits" : 2
        },
        "2" : {
          "date" : "2025-01-08",
          "commits" : 1
        }
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dummy/file/path",
            "uriBaseId" : "SRCROOT",
            "index" : 0
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1
          }
        }
      } ]
    }, {
      "ruleId" : "Commit Size",
      "message" : {
        "text" : "See properties for detailed information."
      },
      "properties" : {
        "0" : {
          "totalLinesAdded" : 116
        },
        "1" : {
          "totalLinesDeleted" : 9
        }
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dummy/file/path",
            "uriBaseId" : "SRCROOT",
            "index" : 0
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1
          }
        }
      } ]
    }, {
      "ruleId" : "Code Churn",
      "message" : {
        "text" : "See properties for detailed information."
      },
      "properties" : {
        "files" : [ {
          "filePath" : "test.py",
          "methods" : [ {
            "methodName" : "get_task_count(self)",
            "modifications" : 2
          }, {
            "methodName" : "main()",
            "modifications" : 2
          }, {
            "methodName" : "__init__(self)",
            "modifications" : 2
          }, {
            "methodName" : "remove_task(self, task, v)",
            "modifications" : 2
          }, {
            "methodName" : "mark_doe(self, task)",
            "modifications" : 1
          }, {
            "methodName" : "show_tasks(self)",
            "modifications" : 2
          }, {
            "methodName" : "add_task(self, task, v)",
            "modifications" : 2
          }, {
            "methodName" : "mark_done(self, task)",
            "modifications" : 1
          } ]
        }, {
          "filePath" : "Javatest.java",
          "methods" : [ {
            "methodName" : "void setEmail(String email)",
            "modifications" : 1
          }, {
            "methodName" : "void setName(String name)",
            "modifications" : 1
          }, {
            "methodName" : "String getName()",
            "modifications" : 1
          }, {
            "methodName" : "String getEmail()",
            "modifications" : 1
          } ]
        }, {
          "filePath" : "jstest.js",
          "methods" : [ {
            "methodName" : "showTasks()",
            "modifications" : 2
          }, {
            "methodName" : "arrow_function",
            "modifications" : 2
          }, {
            "methodName" : "getTaskCount()",
            "modifications" : 2
          }, {
            "methodName" : "markDone(task)",
            "modifications" : 2
          }, {
            "methodName" : "constructor()",
            "modifications" : 2
          }, {
            "methodName" : "addTask(task)",
            "modifications" : 2
          }, {
            "methodName" : "removeTask(task)",
            "modifications" : 2
          } ]
        } ]
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dummy/file/path",
            "uriBaseId" : "SRCROOT",
            "index" : 0
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1
          }
        }
      } ]
    }, {
      "ruleId" : "Branch Time",
      "message" : {
        "text" : "See properties for detailed information."
      },
      "properties" : {
        "details" : "No merged branches to calculate average branch time."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dummy/file/path",
            "uriBaseId" : "SRCROOT",
            "index" : 0
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1
          }
        }
      } ]
    }, {
      "ruleId" : "Code Ownership By File",
      "message" : {
        "text" : "See properties for detailed information."
      },
      "properties" : {
        "files" : [ {
          "filePath" : "Javatest.java",
          "contributors" : [ {
            "author" : "Danila",
            "percentage" : 100,
            "changes" : 1
          } ],
          "topContributor" : {
            "percentage" : 100,
            "name" : "Danila"
          }
        }, {
          "filePath" : "test.py",
          "contributors" : [ {
            "author" : "Danila",
            "percentage" : 100,
            "changes" : 2
          } ],
          "topContributor" : {
            "percentage" : 100,
            "name" : "Danila"
          }
        }, {
          "filePath" : "jstest.js",
          "contributors" : [ {
            "author" : "Danila",
            "percentage" : 100,
            "changes" : 2
          } ],
          "topContributor" : {
            "percentage" : 100,
            "name" : "Danila"
          }
        } ]
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dummy/file/path",
            "uriBaseId" : "SRCROOT",
            "index" : 0
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1
          }
        }
      } ]
    }, {
      "ruleId" : "CommitFixRevert",
      "message" : {
        "text" : "See properties for detailed information."
      },
      "properties" : {
        "0" : {
          "date" : "Wed Jan 08 12:12:30 CET 2025",
          "author" : "Danila",
          "commitID" : "4b1aff3ba9bee670164d6c202383b68823cb6b4b",
          "message" : "fix revert\n"
        }
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dummy/file/path",
            "uriBaseId" : "SRCROOT",
            "index" : 0
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1
          }
        }
      } ]
    } ],
    "artifacts" : [ {
      "location" : {
        "uri" : "dummy/file/path",
        "uriBaseId" : "SRCROOT"
      }
    } ],
    "properties" : { }
  }, {
    "tool" : {
      "driver" : {
        "name" : "PMD",
        "version" : "7.6.0",
        "informationUri" : "https://docs.pmd-code.org/latest/",
        "rules" : [ {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'generateMetric(MetricConfig, StringBuilder)' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CouplingBetweenObjects",
          "shortDescription" : {
            "text" : "High amount of different objects as members denotes a high coupling"
          },
          "fullDescription" : {
            "text" : "\nThis rule counts the number of unique attributes, local variables, and return types within an object.\nA number higher than the specified threshold can indicate a high degree of coupling.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#couplingbetweenobjects",
          "help" : {
            "text" : "\nThis rule counts the number of unique attributes, local variables, and return types within an object.\nA number higher than the specified threshold can indicate a high degree of coupling.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JavascriptParserStrategy' has a NCSS line count of 62 (Highest = 12)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'runJavascriptAnalysis(String)' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'copyResultFromDocker()' has a cyclomatic complexity of 4."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'getMetricGenerator(SupportedLanguages)' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'MetricAnalyzer' has a NCSS line count of 16 (Highest = 10)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'runMetrics(CodeAnalysisConfig)' has a cyclomatic complexity of 4."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JavaRulesetGenerator' has a NCSS line count of 40 (Highest = 13)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'IterateThroughMetrics(Map<MetricEnum, MetricConfig>, StringBuilder)' has a cyclomatic complexity of 4."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'generateMetricFile(StringBuilder)' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JavascriptRulesetGenerator' has a NCSS line count of 48 (Highest = 21)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'iterateThroughMetrics(Map<MetricEnum, MetricConfig>, StringBuilder)' has a cyclomatic complexity of 4."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JavaNcssCount' has a NCSS line count of 13 (Highest = 12)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'generateMetric(MetricConfig, StringBuilder)' has a cyclomatic complexity of 5."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JavaParserStrategy' has a NCSS line count of 29 (Highest = 11)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JavaMetricFactory' has a NCSS line count of 11 (Highest = 2)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'reflect(JSONObject)' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JavascriptMetricFactory' has a NCSS line count of 11 (Highest = 2)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'MetricAnalyzerBuilder' has a NCSS line count of 14 (Highest = 10)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'analyze(CodeAnalysisConfig)' has a cyclomatic complexity of 4."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'LanguageStrategyRunner' has a NCSS line count of 16 (Highest = 10)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'execute(String)' has a cyclomatic complexity of 4."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'getMetric(GitMetricEnum, int)' has a cyclomatic complexity of 8."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'GitMetricAnalyzerBuilder' has a NCSS line count of 19 (Highest = 7)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'analyze(Repository)' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JavaScriptLexerBase' has a NCSS line count of 73 (Highest = 19)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'nextToken()' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'ProcessOpenBrace()' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'ProcessCloseBrace()' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'ProcessStringLiteral()' has a cyclomatic complexity of 6."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'IsRegexPossible()' has a cyclomatic complexity of 14."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JavaScriptParserBase' has a NCSS line count of 35 (Highest = 17)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'lineTerminatorAhead()' has a cyclomatic complexity of 6."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The interface 'JavaParserVisitor' has a NCSS line count of 140 (Highest = 1)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The interface 'JavaParserListener' has a NCSS line count of 279 (Highest = 1)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The interface 'JavaScriptParserVisitor' has a NCSS line count of 145 (Highest = 1)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JavaParserBaseVisitor' has a NCSS line count of 279 (Highest = 2)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The class 'JavaParserBaseVisitor' has a total cyclomatic complexity of 139 (highest 1)."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The interface 'JavaScriptParserListener' has a NCSS line count of 289 (Highest = 1)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JavaScriptParserBaseVisitor' has a NCSS line count of 289 (Highest = 2)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The class 'JavaScriptParserBaseVisitor' has a total cyclomatic complexity of 144 (highest 1)."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'Python3LexerBase' has a NCSS line count of 75 (Highest = 21)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'nextToken()' has a cyclomatic complexity of 8."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'commonToken(int, String)' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'getIndentationCount(String)' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CognitiveComplexity",
          "shortDescription" : {
            "text" : "The method 'onNewLine()' has a cognitive complexity of 16, current threshold is 15"
          },
          "fullDescription" : {
            "text" : "\n            Methods that are highly complex are difficult to read and more costly to maintain. If you include too much decisional\n            logic within a single method, you make its behavior hard to understand and more difficult to modify.\n\n            Cognitive complexity is a measure of how difficult it is for humans to read and understand a method. Code that contains\n            a break in the control flow is more complex, whereas the use of language shorthands doesn't increase the level of\n            complexity. Nested control flows can make a method more difficult to understand, with each additional nesting of the\n            control flow leading to an increase in cognitive complexity.\n\n            Information about Cognitive complexity can be found in the original paper here:\n            <https://www.sonarsource.com/docs/CognitiveComplexity.pdf>\n\n            By default, this rule reports methods with a complexity of 15 or more. Reported methods should be broken down into less\n            complex components.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cognitivecomplexity",
          "help" : {
            "text" : "\n            Methods that are highly complex are difficult to read and more costly to maintain. If you include too much decisional\n            logic within a single method, you make its behavior hard to understand and more difficult to modify.\n\n            Cognitive complexity is a measure of how difficult it is for humans to read and understand a method. Code that contains\n            a break in the control flow is more complex, whereas the use of language shorthands doesn't increase the level of\n            complexity. Nested control flows can make a method more difficult to understand, with each additional nesting of the\n            control flow leading to an increase in cognitive complexity.\n\n            Information about Cognitive complexity can be found in the original paper here:\n            <https://www.sonarsource.com/docs/CognitiveComplexity.pdf>\n\n            By default, this rule reports methods with a complexity of 15 or more. Reported methods should be broken down into less\n            complex components.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'onNewLine()' has a cyclomatic complexity of 12."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JavaScriptParserBaseListener' has a NCSS line count of 293 (Highest = 1)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The class 'JavaScriptParserBaseListener' has a total cyclomatic complexity of 292 (highest 1)."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JavaParserBaseListener' has a NCSS line count of 283 (Highest = 1)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The class 'JavaParserBaseListener' has a total cyclomatic complexity of 282 (highest 1)."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The interface 'Python3ParserVisitor' has a NCSS line count of 120 (Highest = 1)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The interface 'Python3ParserListener' has a NCSS line count of 239 (Highest = 1)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'GitAnalyzer' has a NCSS line count of 33 (Highest = 13)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'main(String[])' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'deleteDirectory(File)' has a cyclomatic complexity of 5."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'getConfig()' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'Python3ParserBaseVisitor' has a NCSS line count of 239 (Highest = 2)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The class 'Python3ParserBaseVisitor' has a total cyclomatic complexity of 119 (highest 1)."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'Python3ParserBaseListener' has a NCSS line count of 243 (Highest = 1)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The class 'Python3ParserBaseListener' has a total cyclomatic complexity of 242 (highest 1)."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JavaChurn' has a NCSS line count of 31 (Highest = 11)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'MethodListener' has a NCSS line count of 19 (Highest = 8)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'enterMethodDeclaration(MethodDeclarationContext)' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'getParameters(FormalParametersContext)' has a cyclomatic complexity of 4."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JavaScriptChurn' has a NCSS line count of 45 (Highest = 11)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'MethodListener' has a NCSS line count of 33 (Highest = 10)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'enterFunctionExpression(FunctionExpressionContext)' has a cyclomatic complexity of 5."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'getParameters(FormalParameterListContext)' has a cyclomatic complexity of 5."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'CommitFixRevert' has a NCSS line count of 40 (Highest = 15)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'analyze(Repository)' has a cyclomatic complexity of 8."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'returnJSONResult()' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'toString()' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'CommitFrequency' has a NCSS line count of 33 (Highest = 12)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'analyze(Repository)' has a cyclomatic complexity of 6."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'PythonChurn' has a NCSS line count of 31 (Highest = 11)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'MethodListener' has a NCSS line count of 19 (Highest = 10)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'getParameters(ParametersContext)' has a cyclomatic complexity of 5."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'BranchTime' has a NCSS line count of 71 (Highest = 17)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'analyze(Repository)' has a cyclomatic complexity of 7."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'calculateBranchLifetime(Repository, Ref)' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'getFirstUniqueCommit(Repository, Ref)' has a cyclomatic complexity of 4."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'getMergeCommit(Repository, Ref)' has a cyclomatic complexity of 8."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'CodeAnalysisConfig' has a NCSS line count of 21 (Highest = -2147483648)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'MetricConfig' has a NCSS line count of 12 (Highest = 2)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'BranchCountWithAuthors' has a NCSS line count of 48 (Highest = 13)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'analyze(Repository)' has a cyclomatic complexity of 5."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'getBranchAuthor(Repository, Ref, Git)' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'returnJSONResult()' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'toString()' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'CodeChurn' has a NCSS line count of 74 (Highest = 17)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'getResultMap()' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'analyzeCommitDiff(Repository, RevCommit, RevCommit)' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'getFileExtension(String)' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'CodeOwnershipByFile' has a NCSS line count of 80 (Highest = 18)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'analyzeCommitDiff(Repository, RevCommit, String)' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'findTopContributor(Map<String, Integer>)' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'GitAnalyzerTest' has a NCSS line count of 37 (Highest = 19)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'testDeleteDirectory()' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'testRunAllLanguages()' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'MetricAnalyzerTest' has a NCSS line count of 34 (Highest = 11)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'setUp()' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'loadConfig()' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'JGitSarifParser' has a NCSS line count of 121 (Highest = 8)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'SarifOutput' has a NCSS line count of 41 (Highest = -2147483648)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'Run' has a NCSS line count of 18 (Highest = -2147483648)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'Result' has a NCSS line count of 19 (Highest = -2147483648)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'Location' has a NCSS line count of 12 (Highest = -2147483648)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'PhysicalLocation' has a NCSS line count of 10 (Highest = -2147483648)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'SarifConverter' has a NCSS line count of 64 (Highest = 46)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'convertToSarif(AnalysisResults, boolean)' has a cyclomatic complexity of 5."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'extractProperties(Object)' has a cyclomatic complexity of 6."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'parseJGit()' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'ESLintSarifParser' has a NCSS line count of 55 (Highest = 52)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'parseESLint()' has a cyclomatic complexity of 5."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'mapSeverity(int)' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'ConfigParserTest' has a NCSS line count of 14 (Highest = 9)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'MetricAnalyzerTest' has a NCSS line count of 17 (Highest = 16)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'testRunValidMetrics()' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'SarifMerger' has a NCSS line count of 36 (Highest = 28)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'mergeSarifFiles(List<String>, String)' has a cyclomatic complexity of 8."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'main(String[])' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'MetricAnalyzerJavascriptTest' has a NCSS line count of 94 (Highest = 10)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'fileHasLine(String, File)' has a cyclomatic complexity of 3."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'GitMetricTest' has a NCSS line count of 78 (Highest = 24)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'analyze(Map<GitMetricEnum, MetricConfig>)' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'BaseChurn' has a NCSS line count of 27 (Highest = 14)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'processFileChanges(Repository, RevCommit, String, Map<String, Map<String, Integer>>, String)' has a cyclomatic complexity of 7."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "ExcessiveParameterList",
          "shortDescription" : {
            "text" : "Avoid long parameter lists."
          },
          "fullDescription" : {
            "text" : "\nMethods with numerous parameters are a challenge to maintain, especially if most of them share the\nsame datatype. These situations usually denote the need for new objects to wrap the numerous parameters.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#excessiveparameterlist",
          "help" : {
            "text" : "\nMethods with numerous parameters are a challenge to maintain, especially if most of them share the\nsame datatype. These situations usually denote the need for new objects to wrap the numerous parameters.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'readFileFromCommit(Repository, RevCommit, String)' has a cyclomatic complexity of 2."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "NcssCount",
          "shortDescription" : {
            "text" : "The class 'CommitSize' has a NCSS line count of 63 (Highest = 29)."
          },
          "fullDescription" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#ncsscount",
          "help" : {
            "text" : "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        }, {
          "id" : "CyclomaticComplexity",
          "shortDescription" : {
            "text" : "The method 'analyzeCommitDiff(Repository, RevCommit, RevCommit)' has a cyclomatic complexity of 6."
          },
          "fullDescription" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "helpUri" : "https://docs.pmd-code.org/pmd-doc-7.6.0/pmd_rules_java_design.html#cyclomaticcomplexity",
          "help" : {
            "text" : "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more\ndetails on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 80, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        "
          },
          "properties" : {
            "ruleset" : "Design",
            "priority" : 3,
            "tags" : [ "Design" ]
          }
        } ]
      }
    },
    "results" : [ {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 0,
      "message" : {
        "text" : "The method 'generateMetric(MetricConfig, StringBuilder)' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageAnalyzer/LanguageMetricGenerator/JavaMetrics/JavaExcessiveParameterList.java"
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 17,
            "endLine" : 9,
            "endColumn" : 31
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageParsingStartegies/JavascriptParserStrategy.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 111,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 2,
      "message" : {
        "text" : "The class 'JavascriptParserStrategy' has a NCSS line count of 62 (Highest = 12)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageParsingStartegies/JavascriptParserStrategy.java"
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 8,
            "endLine" : 13,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 3,
      "message" : {
        "text" : "The method 'runJavascriptAnalysis(String)' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageParsingStartegies/JavascriptParserStrategy.java"
          },
          "region" : {
            "startLine" : 42,
            "startColumn" : 18,
            "endLine" : 42,
            "endColumn" : 39
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 4,
      "message" : {
        "text" : "The method 'copyResultFromDocker()' has a cyclomatic complexity of 4."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageParsingStartegies/JavascriptParserStrategy.java"
          },
          "region" : {
            "startLine" : 88,
            "startColumn" : 18,
            "endLine" : 88,
            "endColumn" : 38
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 5,
      "message" : {
        "text" : "The method 'getMetricGenerator(SupportedLanguages)' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageFactory/LanguageFactory.java"
          },
          "region" : {
            "startLine" : 22,
            "startColumn" : 48,
            "endLine" : 22,
            "endColumn" : 66
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/MetricAnalyzer.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 58,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 6,
      "message" : {
        "text" : "The class 'MetricAnalyzer' has a NCSS line count of 16 (Highest = 10)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/MetricAnalyzer.java"
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 8,
            "endLine" : 13,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 7,
      "message" : {
        "text" : "The method 'runMetrics(CodeAnalysisConfig)' has a cyclomatic complexity of 4."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/MetricAnalyzer.java"
          },
          "region" : {
            "startLine" : 40,
            "startColumn" : 17,
            "endLine" : 40,
            "endColumn" : 27
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageAnalyzer/JavaRulesetGenerator.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 92,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 8,
      "message" : {
        "text" : "The class 'JavaRulesetGenerator' has a NCSS line count of 40 (Highest = 13)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageAnalyzer/JavaRulesetGenerator.java"
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 8,
            "endLine" : 12,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 9,
      "message" : {
        "text" : "The method 'IterateThroughMetrics(Map<MetricEnum, MetricConfig>, StringBuilder)' has a cyclomatic complexity of 4."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageAnalyzer/JavaRulesetGenerator.java"
          },
          "region" : {
            "startLine" : 62,
            "startColumn" : 18,
            "endLine" : 62,
            "endColumn" : 39
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 10,
      "message" : {
        "text" : "The method 'generateMetricFile(StringBuilder)' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageAnalyzer/JavaRulesetGenerator.java"
          },
          "region" : {
            "startLine" : 76,
            "startColumn" : 18,
            "endLine" : 76,
            "endColumn" : 36
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageAnalyzer/JavascriptRulesetGenerator.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 87,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 11,
      "message" : {
        "text" : "The class 'JavascriptRulesetGenerator' has a NCSS line count of 48 (Highest = 21)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageAnalyzer/JavascriptRulesetGenerator.java"
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endLine" : 14,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 12,
      "message" : {
        "text" : "The method 'iterateThroughMetrics(Map<MetricEnum, MetricConfig>, StringBuilder)' has a cyclomatic complexity of 4."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageAnalyzer/JavascriptRulesetGenerator.java"
          },
          "region" : {
            "startLine" : 57,
            "startColumn" : 18,
            "endLine" : 57,
            "endColumn" : 39
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 10,
      "message" : {
        "text" : "The method 'generateMetricFile(StringBuilder)' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageAnalyzer/JavascriptRulesetGenerator.java"
          },
          "region" : {
            "startLine" : 71,
            "startColumn" : 18,
            "endLine" : 71,
            "endColumn" : 36
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 13,
      "message" : {
        "text" : "The class 'JavaNcssCount' has a NCSS line count of 13 (Highest = 12)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageAnalyzer/LanguageMetricGenerator/JavaMetrics/JavaNcssCount.java"
          },
          "region" : {
            "startLine" : 7,
            "startColumn" : 8,
            "endLine" : 7,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 14,
      "message" : {
        "text" : "The method 'generateMetric(MetricConfig, StringBuilder)' has a cyclomatic complexity of 5."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageAnalyzer/LanguageMetricGenerator/JavaMetrics/JavaNcssCount.java"
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 17,
            "endLine" : 9,
            "endColumn" : 31
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageParsingStartegies/JavaParserStrategy.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 66,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 15,
      "message" : {
        "text" : "The class 'JavaParserStrategy' has a NCSS line count of 29 (Highest = 11)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageParsingStartegies/JavaParserStrategy.java"
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 8,
            "endLine" : 15,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/MetricFactories/JavaMetricFactory.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 24,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 16,
      "message" : {
        "text" : "The class 'JavaMetricFactory' has a NCSS line count of 11 (Highest = 2)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/MetricFactories/JavaMetricFactory.java"
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 8,
            "endLine" : 9,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 17,
      "message" : {
        "text" : "The method 'reflect(JSONObject)' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/JSONReflectUtil.java"
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 24,
            "endLine" : 10,
            "endColumn" : 31
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/MetricFactories/JavascriptMetricFactory.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 26,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 18,
      "message" : {
        "text" : "The class 'JavascriptMetricFactory' has a NCSS line count of 11 (Highest = 2)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/MetricFactories/JavascriptMetricFactory.java"
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 8,
            "endLine" : 10,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/MetricAnalyzerBuilder.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 50,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 19,
      "message" : {
        "text" : "The class 'MetricAnalyzerBuilder' has a NCSS line count of 14 (Highest = 10)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/MetricAnalyzerBuilder.java"
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 8,
            "endLine" : 12,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 20,
      "message" : {
        "text" : "The method 'analyze(CodeAnalysisConfig)' has a cyclomatic complexity of 4."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/MetricAnalyzerBuilder.java"
          },
          "region" : {
            "startLine" : 29,
            "startColumn" : 17,
            "endLine" : 29,
            "endColumn" : 24
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageParsingStartegies/LanguageStrategyRunner.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 61,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 21,
      "message" : {
        "text" : "The class 'LanguageStrategyRunner' has a NCSS line count of 16 (Highest = 10)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageParsingStartegies/LanguageStrategyRunner.java"
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 8,
            "endLine" : 9,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 22,
      "message" : {
        "text" : "The method 'execute(String)' has a cyclomatic complexity of 4."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/LanguageMetrics/LanguageParsingStartegies/LanguageStrategyRunner.java"
          },
          "region" : {
            "startLine" : 27,
            "startColumn" : 17,
            "endLine" : 27,
            "endColumn" : 24
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 23,
      "message" : {
        "text" : "The method 'getMetric(GitMetricEnum, int)' has a cyclomatic complexity of 8."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/GitMetricFactory.java"
          },
          "region" : {
            "startLine" : 6,
            "startColumn" : 40,
            "endLine" : 6,
            "endColumn" : 49
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/GitMetricAnalyzerBuilder.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 47,
            "endColumn" : 2
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 24,
      "message" : {
        "text" : "The class 'GitMetricAnalyzerBuilder' has a NCSS line count of 19 (Highest = 7)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/GitMetricAnalyzerBuilder.java"
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 8,
            "endLine" : 19,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 25,
      "message" : {
        "text" : "The method 'analyze(Repository)' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/GitMetricAnalyzerBuilder.java"
          },
          "region" : {
            "startLine" : 27,
            "startColumn" : 17,
            "endLine" : 27,
            "endColumn" : 24
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptLexerBase.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 167,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 26,
      "message" : {
        "text" : "The class 'JavaScriptLexerBase' has a NCSS line count of 73 (Highest = 19)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptLexerBase.java"
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 17,
            "endLine" : 12,
            "endColumn" : 22
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 27,
      "message" : {
        "text" : "The method 'nextToken()' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptLexerBase.java"
          },
          "region" : {
            "startLine" : 76,
            "startColumn" : 18,
            "endLine" : 76,
            "endColumn" : 27
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 28,
      "message" : {
        "text" : "The method 'ProcessOpenBrace()' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptLexerBase.java"
          },
          "region" : {
            "startLine" : 87,
            "startColumn" : 20,
            "endLine" : 87,
            "endColumn" : 36
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 29,
      "message" : {
        "text" : "The method 'ProcessCloseBrace()' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptLexerBase.java"
          },
          "region" : {
            "startLine" : 94,
            "startColumn" : 20,
            "endLine" : 94,
            "endColumn" : 37
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 30,
      "message" : {
        "text" : "The method 'ProcessStringLiteral()' has a cyclomatic complexity of 6."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptLexerBase.java"
          },
          "region" : {
            "startLine" : 110,
            "startColumn" : 20,
            "endLine" : 110,
            "endColumn" : 40
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 31,
      "message" : {
        "text" : "The method 'IsRegexPossible()' has a cyclomatic complexity of 14."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptLexerBase.java"
          },
          "region" : {
            "startLine" : 128,
            "startColumn" : 23,
            "endLine" : 128,
            "endColumn" : 38
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 32,
      "message" : {
        "text" : "The class 'JavaScriptParserBase' has a NCSS line count of 35 (Highest = 17)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParserBase.java"
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 17,
            "endLine" : 9,
            "endColumn" : 22
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 33,
      "message" : {
        "text" : "The method 'lineTerminatorAhead()' has a cyclomatic complexity of 6."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParserBase.java"
          },
          "region" : {
            "startLine" : 67,
            "startColumn" : 23,
            "endLine" : 67,
            "endColumn" : 42
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 34,
      "message" : {
        "text" : "The interface 'JavaParserVisitor' has a NCSS line count of 140 (Highest = 1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaParserVisitor.java"
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 8,
            "endLine" : 12,
            "endColumn" : 17
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 35,
      "message" : {
        "text" : "The interface 'JavaParserListener' has a NCSS line count of 279 (Highest = 1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaParserListener.java"
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 8,
            "endLine" : 9,
            "endColumn" : 17
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 36,
      "message" : {
        "text" : "The interface 'JavaScriptParserVisitor' has a NCSS line count of 145 (Highest = 1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParserVisitor.java"
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 8,
            "endLine" : 12,
            "endColumn" : 17
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaParserBaseVisitor.java"
          },
          "region" : {
            "startLine" : 2,
            "startColumn" : 1,
            "endLine" : 988,
            "endColumn" : 2
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 37,
      "message" : {
        "text" : "The class 'JavaParserBaseVisitor' has a NCSS line count of 279 (Highest = 2)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaParserBaseVisitor.java"
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endLine" : 14,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 38,
      "message" : {
        "text" : "The class 'JavaParserBaseVisitor' has a total cyclomatic complexity of 139 (highest 1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaParserBaseVisitor.java"
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endLine" : 14,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 39,
      "message" : {
        "text" : "The interface 'JavaScriptParserListener' has a NCSS line count of 289 (Highest = 1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParserListener.java"
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 8,
            "endLine" : 9,
            "endColumn" : 17
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParserBaseVisitor.java"
          },
          "region" : {
            "startLine" : 2,
            "startColumn" : 1,
            "endLine" : 1023,
            "endColumn" : 2
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 40,
      "message" : {
        "text" : "The class 'JavaScriptParserBaseVisitor' has a NCSS line count of 289 (Highest = 2)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParserBaseVisitor.java"
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endLine" : 14,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 41,
      "message" : {
        "text" : "The class 'JavaScriptParserBaseVisitor' has a total cyclomatic complexity of 144 (highest 1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParserBaseVisitor.java"
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endLine" : 14,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/Python3LexerBase.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 153,
            "endColumn" : 2
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 42,
      "message" : {
        "text" : "The class 'Python3LexerBase' has a NCSS line count of 75 (Highest = 21)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/Python3LexerBase.java"
          },
          "region" : {
            "startLine" : 7,
            "startColumn" : 10,
            "endLine" : 7,
            "endColumn" : 15
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 43,
      "message" : {
        "text" : "The method 'nextToken()' has a cyclomatic complexity of 8."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/Python3LexerBase.java"
          },
          "region" : {
            "startLine" : 28,
            "startColumn" : 18,
            "endLine" : 28,
            "endColumn" : 27
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 44,
      "message" : {
        "text" : "The method 'commonToken(int, String)' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/Python3LexerBase.java"
          },
          "region" : {
            "startLine" : 67,
            "startColumn" : 25,
            "endLine" : 67,
            "endColumn" : 36
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 45,
      "message" : {
        "text" : "The method 'getIndentationCount(String)' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/Python3LexerBase.java"
          },
          "region" : {
            "startLine" : 81,
            "startColumn" : 16,
            "endLine" : 81,
            "endColumn" : 35
          }
        }
      } ]
    }, {
      "ruleId" : "CognitiveComplexity",
      "ruleIndex" : 46,
      "message" : {
        "text" : "The method 'onNewLine()' has a cognitive complexity of 16, current threshold is 15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/Python3LexerBase.java"
          },
          "region" : {
            "startLine" : 109,
            "startColumn" : 10,
            "endLine" : 109,
            "endColumn" : 19
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 47,
      "message" : {
        "text" : "The method 'onNewLine()' has a cyclomatic complexity of 12."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/Python3LexerBase.java"
          },
          "region" : {
            "startLine" : 109,
            "startColumn" : 10,
            "endLine" : 109,
            "endColumn" : 19
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParserBaseListener.java"
          },
          "region" : {
            "startLine" : 2,
            "startColumn" : 1,
            "endLine" : 1768,
            "endColumn" : 2
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 48,
      "message" : {
        "text" : "The class 'JavaScriptParserBaseListener' has a NCSS line count of 293 (Highest = 1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParserBaseListener.java"
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endLine" : 14,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 49,
      "message" : {
        "text" : "The class 'JavaScriptParserBaseListener' has a total cyclomatic complexity of 292 (highest 1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParserBaseListener.java"
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endLine" : 14,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaParserBaseListener.java"
          },
          "region" : {
            "startLine" : 2,
            "startColumn" : 1,
            "endLine" : 1708,
            "endColumn" : 2
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 50,
      "message" : {
        "text" : "The class 'JavaParserBaseListener' has a NCSS line count of 283 (Highest = 1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaParserBaseListener.java"
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endLine" : 14,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 51,
      "message" : {
        "text" : "The class 'JavaParserBaseListener' has a total cyclomatic complexity of 282 (highest 1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/JavaParserBaseListener.java"
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endLine" : 14,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 52,
      "message" : {
        "text" : "The interface 'Python3ParserVisitor' has a NCSS line count of 120 (Highest = 1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/Python3ParserVisitor.java"
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 8,
            "endLine" : 12,
            "endColumn" : 17
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 53,
      "message" : {
        "text" : "The interface 'Python3ParserListener' has a NCSS line count of 239 (Highest = 1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/Python3ParserListener.java"
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 8,
            "endLine" : 9,
            "endColumn" : 17
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/GitAnalyzer.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 74,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 54,
      "message" : {
        "text" : "The class 'GitAnalyzer' has a NCSS line count of 33 (Highest = 13)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/GitAnalyzer.java"
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 8,
            "endLine" : 17,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 55,
      "message" : {
        "text" : "The method 'main(String[])' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/GitAnalyzer.java"
          },
          "region" : {
            "startLine" : 23,
            "startColumn" : 24,
            "endLine" : 23,
            "endColumn" : 28
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 56,
      "message" : {
        "text" : "The method 'deleteDirectory(File)' has a cyclomatic complexity of 5."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/GitAnalyzer.java"
          },
          "region" : {
            "startLine" : 51,
            "startColumn" : 17,
            "endLine" : 51,
            "endColumn" : 32
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 57,
      "message" : {
        "text" : "The method 'getConfig()' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/GitAnalyzer.java"
          },
          "region" : {
            "startLine" : 66,
            "startColumn" : 17,
            "endLine" : 66,
            "endColumn" : 26
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/Python3ParserBaseVisitor.java"
          },
          "region" : {
            "startLine" : 2,
            "startColumn" : 1,
            "endLine" : 848,
            "endColumn" : 2
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 58,
      "message" : {
        "text" : "The class 'Python3ParserBaseVisitor' has a NCSS line count of 239 (Highest = 2)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/Python3ParserBaseVisitor.java"
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endLine" : 14,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 59,
      "message" : {
        "text" : "The class 'Python3ParserBaseVisitor' has a total cyclomatic complexity of 119 (highest 1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/Python3ParserBaseVisitor.java"
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endLine" : 14,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/Python3ParserBaseListener.java"
          },
          "region" : {
            "startLine" : 2,
            "startColumn" : 1,
            "endLine" : 1468,
            "endColumn" : 2
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 60,
      "message" : {
        "text" : "The class 'Python3ParserBaseListener' has a NCSS line count of 243 (Highest = 1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/Python3ParserBaseListener.java"
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endLine" : 14,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 61,
      "message" : {
        "text" : "The class 'Python3ParserBaseListener' has a total cyclomatic complexity of 242 (highest 1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/antlr/Python3ParserBaseListener.java"
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endLine" : 14,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/JavaChurn.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 61,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 62,
      "message" : {
        "text" : "The class 'JavaChurn' has a NCSS line count of 31 (Highest = 11)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/JavaChurn.java"
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 8,
            "endLine" : 16,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 63,
      "message" : {
        "text" : "The class 'MethodListener' has a NCSS line count of 19 (Highest = 8)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/JavaChurn.java"
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 20,
            "endLine" : 31,
            "endColumn" : 25
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 64,
      "message" : {
        "text" : "The method 'enterMethodDeclaration(MethodDeclarationContext)' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/JavaChurn.java"
          },
          "region" : {
            "startLine" : 39,
            "startColumn" : 21,
            "endLine" : 39,
            "endColumn" : 43
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 65,
      "message" : {
        "text" : "The method 'getParameters(FormalParametersContext)' has a cyclomatic complexity of 4."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/JavaChurn.java"
          },
          "region" : {
            "startLine" : 48,
            "startColumn" : 30,
            "endLine" : 48,
            "endColumn" : 43
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/JavaScriptChurn.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 83,
            "endColumn" : 2
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 66,
      "message" : {
        "text" : "The class 'JavaScriptChurn' has a NCSS line count of 45 (Highest = 11)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/JavaScriptChurn.java"
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 8,
            "endLine" : 16,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 67,
      "message" : {
        "text" : "The class 'MethodListener' has a NCSS line count of 33 (Highest = 10)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/JavaScriptChurn.java"
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 20,
            "endLine" : 31,
            "endColumn" : 25
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 68,
      "message" : {
        "text" : "The method 'enterFunctionExpression(FunctionExpressionContext)' has a cyclomatic complexity of 5."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/JavaScriptChurn.java"
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 21,
            "endLine" : 47,
            "endColumn" : 44
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 69,
      "message" : {
        "text" : "The method 'getParameters(FormalParameterListContext)' has a cyclomatic complexity of 5."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/JavaScriptChurn.java"
          },
          "region" : {
            "startLine" : 67,
            "startColumn" : 24,
            "endLine" : 67,
            "endColumn" : 37
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CommitFixRevert.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 86,
            "endColumn" : 2
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 70,
      "message" : {
        "text" : "The class 'CommitFixRevert' has a NCSS line count of 40 (Highest = 15)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CommitFixRevert.java"
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 8,
            "endLine" : 16,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 71,
      "message" : {
        "text" : "The method 'analyze(Repository)' has a cyclomatic complexity of 8."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CommitFixRevert.java"
          },
          "region" : {
            "startLine" : 27,
            "startColumn" : 17,
            "endLine" : 27,
            "endColumn" : 24
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 72,
      "message" : {
        "text" : "The method 'returnJSONResult()' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CommitFixRevert.java"
          },
          "region" : {
            "startLine" : 50,
            "startColumn" : 23,
            "endLine" : 50,
            "endColumn" : 39
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 73,
      "message" : {
        "text" : "The method 'toString()' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CommitFixRevert.java"
          },
          "region" : {
            "startLine" : 67,
            "startColumn" : 19,
            "endLine" : 67,
            "endColumn" : 27
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CommitFrequency.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 78,
            "endColumn" : 2
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 74,
      "message" : {
        "text" : "The class 'CommitFrequency' has a NCSS line count of 33 (Highest = 12)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CommitFrequency.java"
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 8,
            "endLine" : 19,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 75,
      "message" : {
        "text" : "The method 'analyze(Repository)' has a cyclomatic complexity of 6."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CommitFrequency.java"
          },
          "region" : {
            "startLine" : 29,
            "startColumn" : 17,
            "endLine" : 29,
            "endColumn" : 24
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 72,
      "message" : {
        "text" : "The method 'returnJSONResult()' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CommitFrequency.java"
          },
          "region" : {
            "startLine" : 49,
            "startColumn" : 23,
            "endLine" : 49,
            "endColumn" : 39
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 73,
      "message" : {
        "text" : "The method 'toString()' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CommitFrequency.java"
          },
          "region" : {
            "startLine" : 63,
            "startColumn" : 19,
            "endLine" : 63,
            "endColumn" : 27
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/PythonChurn.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 62,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 76,
      "message" : {
        "text" : "The class 'PythonChurn' has a NCSS line count of 31 (Highest = 11)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/PythonChurn.java"
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 8,
            "endLine" : 16,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 77,
      "message" : {
        "text" : "The class 'MethodListener' has a NCSS line count of 19 (Highest = 10)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/PythonChurn.java"
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 20,
            "endLine" : 31,
            "endColumn" : 25
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 78,
      "message" : {
        "text" : "The method 'getParameters(ParametersContext)' has a cyclomatic complexity of 5."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/PythonChurn.java"
          },
          "region" : {
            "startLine" : 46,
            "startColumn" : 24,
            "endLine" : 46,
            "endColumn" : 37
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/BranchTime.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 158,
            "endColumn" : 2
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 79,
      "message" : {
        "text" : "The class 'BranchTime' has a NCSS line count of 71 (Highest = 17)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/BranchTime.java"
          },
          "region" : {
            "startLine" : 38,
            "startColumn" : 8,
            "endLine" : 38,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 80,
      "message" : {
        "text" : "The method 'analyze(Repository)' has a cyclomatic complexity of 7."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/BranchTime.java"
          },
          "region" : {
            "startLine" : 48,
            "startColumn" : 17,
            "endLine" : 48,
            "endColumn" : 24
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 81,
      "message" : {
        "text" : "The method 'calculateBranchLifetime(Repository, Ref)' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/BranchTime.java"
          },
          "region" : {
            "startLine" : 72,
            "startColumn" : 18,
            "endLine" : 72,
            "endColumn" : 41
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 82,
      "message" : {
        "text" : "The method 'getFirstUniqueCommit(Repository, Ref)' has a cyclomatic complexity of 4."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/BranchTime.java"
          },
          "region" : {
            "startLine" : 87,
            "startColumn" : 23,
            "endLine" : 87,
            "endColumn" : 43
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 83,
      "message" : {
        "text" : "The method 'getMergeCommit(Repository, Ref)' has a cyclomatic complexity of 8."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/BranchTime.java"
          },
          "region" : {
            "startLine" : 107,
            "startColumn" : 23,
            "endLine" : 107,
            "endColumn" : 37
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 73,
      "message" : {
        "text" : "The method 'toString()' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/BranchTime.java"
          },
          "region" : {
            "startLine" : 145,
            "startColumn" : 19,
            "endLine" : 145,
            "endColumn" : 27
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/inputparser/CodeAnalysisConfig.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 57,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 84,
      "message" : {
        "text" : "The class 'CodeAnalysisConfig' has a NCSS line count of 21 (Highest = -2147483648)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/inputparser/CodeAnalysisConfig.java"
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endLine" : 14,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 85,
      "message" : {
        "text" : "The class 'MetricConfig' has a NCSS line count of 12 (Highest = 2)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/inputparser/CodeAnalysisConfig.java"
          },
          "region" : {
            "startLine" : 28,
            "startColumn" : 19,
            "endLine" : 28,
            "endColumn" : 24
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/BranchCountWithAuthors.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 102,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 86,
      "message" : {
        "text" : "The class 'BranchCountWithAuthors' has a NCSS line count of 48 (Highest = 13)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/BranchCountWithAuthors.java"
          },
          "region" : {
            "startLine" : 24,
            "startColumn" : 8,
            "endLine" : 24,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 87,
      "message" : {
        "text" : "The method 'analyze(Repository)' has a cyclomatic complexity of 5."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/BranchCountWithAuthors.java"
          },
          "region" : {
            "startLine" : 30,
            "startColumn" : 17,
            "endLine" : 30,
            "endColumn" : 24
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 88,
      "message" : {
        "text" : "The method 'getBranchAuthor(Repository, Ref, Git)' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/BranchCountWithAuthors.java"
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 20,
            "endLine" : 47,
            "endColumn" : 35
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 89,
      "message" : {
        "text" : "The method 'returnJSONResult()' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/BranchCountWithAuthors.java"
          },
          "region" : {
            "startLine" : 60,
            "startColumn" : 23,
            "endLine" : 60,
            "endColumn" : 39
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 90,
      "message" : {
        "text" : "The method 'toString()' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/BranchCountWithAuthors.java"
          },
          "region" : {
            "startLine" : 82,
            "startColumn" : 19,
            "endLine" : 82,
            "endColumn" : 27
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CodeChurn.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 140,
            "endColumn" : 2
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 91,
      "message" : {
        "text" : "The class 'CodeChurn' has a NCSS line count of 74 (Highest = 17)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CodeChurn.java"
          },
          "region" : {
            "startLine" : 24,
            "startColumn" : 8,
            "endLine" : 24,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 80,
      "message" : {
        "text" : "The method 'analyze(Repository)' has a cyclomatic complexity of 7."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CodeChurn.java"
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 17,
            "endLine" : 35,
            "endColumn" : 24
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 92,
      "message" : {
        "text" : "The method 'getResultMap()' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CodeChurn.java"
          },
          "region" : {
            "startLine" : 55,
            "startColumn" : 18,
            "endLine" : 55,
            "endColumn" : 30
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 93,
      "message" : {
        "text" : "The method 'analyzeCommitDiff(Repository, RevCommit, RevCommit)' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CodeChurn.java"
          },
          "region" : {
            "startLine" : 68,
            "startColumn" : 18,
            "endLine" : 68,
            "endColumn" : 35
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 94,
      "message" : {
        "text" : "The method 'getFileExtension(String)' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CodeChurn.java"
          },
          "region" : {
            "startLine" : 81,
            "startColumn" : 19,
            "endLine" : 81,
            "endColumn" : 35
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 89,
      "message" : {
        "text" : "The method 'returnJSONResult()' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CodeChurn.java"
          },
          "region" : {
            "startLine" : 100,
            "startColumn" : 23,
            "endLine" : 100,
            "endColumn" : 39
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 90,
      "message" : {
        "text" : "The method 'toString()' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CodeChurn.java"
          },
          "region" : {
            "startLine" : 125,
            "startColumn" : 19,
            "endLine" : 125,
            "endColumn" : 27
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CodeOwnershipByFile.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 146,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 95,
      "message" : {
        "text" : "The class 'CodeOwnershipByFile' has a NCSS line count of 80 (Highest = 18)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CodeOwnershipByFile.java"
          },
          "region" : {
            "startLine" : 23,
            "startColumn" : 8,
            "endLine" : 23,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 75,
      "message" : {
        "text" : "The method 'analyze(Repository)' has a cyclomatic complexity of 6."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CodeOwnershipByFile.java"
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 17,
            "endLine" : 33,
            "endColumn" : 24
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 96,
      "message" : {
        "text" : "The method 'analyzeCommitDiff(Repository, RevCommit, String)' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CodeOwnershipByFile.java"
          },
          "region" : {
            "startLine" : 55,
            "startColumn" : 18,
            "endLine" : 55,
            "endColumn" : 35
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 89,
      "message" : {
        "text" : "The method 'returnJSONResult()' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CodeOwnershipByFile.java"
          },
          "region" : {
            "startLine" : 81,
            "startColumn" : 23,
            "endLine" : 81,
            "endColumn" : 39
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 90,
      "message" : {
        "text" : "The method 'toString()' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CodeOwnershipByFile.java"
          },
          "region" : {
            "startLine" : 113,
            "startColumn" : 19,
            "endLine" : 113,
            "endColumn" : 27
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 97,
      "message" : {
        "text" : "The method 'findTopContributor(Map<String, Integer>)' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CodeOwnershipByFile.java"
          },
          "region" : {
            "startLine" : 135,
            "startColumn" : 20,
            "endLine" : 135,
            "endColumn" : 38
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/inputparser/ConfigParser.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 14,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/org/mining/GitAnalyzerTest.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 87,
            "endColumn" : 2
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 98,
      "message" : {
        "text" : "The class 'GitAnalyzerTest' has a NCSS line count of 37 (Highest = 19)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/org/mining/GitAnalyzerTest.java"
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 1,
            "endLine" : 17,
            "endColumn" : 6
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 99,
      "message" : {
        "text" : "The method 'testDeleteDirectory()' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/org/mining/GitAnalyzerTest.java"
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 10,
            "endLine" : 19,
            "endColumn" : 29
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 100,
      "message" : {
        "text" : "The method 'testRunAllLanguages()' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/org/mining/GitAnalyzerTest.java"
          },
          "region" : {
            "startLine" : 55,
            "startColumn" : 10,
            "endLine" : 55,
            "endColumn" : 29
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/MetricAnalyzerTest/MetricAnalyzerTest.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 73,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 101,
      "message" : {
        "text" : "The class 'MetricAnalyzerTest' has a NCSS line count of 34 (Highest = 11)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/MetricAnalyzerTest/MetricAnalyzerTest.java"
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 8,
            "endLine" : 17,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 102,
      "message" : {
        "text" : "The method 'setUp()' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/MetricAnalyzerTest/MetricAnalyzerTest.java"
          },
          "region" : {
            "startLine" : 25,
            "startColumn" : 17,
            "endLine" : 25,
            "endColumn" : 22
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 103,
      "message" : {
        "text" : "The method 'loadConfig()' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/MetricAnalyzerTest/MetricAnalyzerTest.java"
          },
          "region" : {
            "startLine" : 66,
            "startColumn" : 39,
            "endLine" : 66,
            "endColumn" : 49
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/JGitSarifParser.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 193,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 104,
      "message" : {
        "text" : "The class 'JGitSarifParser' has a NCSS line count of 121 (Highest = 8)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/JGitSarifParser.java"
          },
          "region" : {
            "startLine" : 7,
            "startColumn" : 8,
            "endLine" : 7,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 105,
      "message" : {
        "text" : "The class 'SarifOutput' has a NCSS line count of 41 (Highest = -2147483648)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/JGitSarifParser.java"
          },
          "region" : {
            "startLine" : 21,
            "startColumn" : 19,
            "endLine" : 21,
            "endColumn" : 24
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 106,
      "message" : {
        "text" : "The class 'Run' has a NCSS line count of 18 (Highest = -2147483648)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/JGitSarifParser.java"
          },
          "region" : {
            "startLine" : 26,
            "startColumn" : 23,
            "endLine" : 26,
            "endColumn" : 28
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 107,
      "message" : {
        "text" : "The class 'Result' has a NCSS line count of 19 (Highest = -2147483648)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/JGitSarifParser.java"
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 23,
            "endLine" : 54,
            "endColumn" : 28
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 108,
      "message" : {
        "text" : "The class 'Location' has a NCSS line count of 12 (Highest = -2147483648)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/JGitSarifParser.java"
          },
          "region" : {
            "startLine" : 64,
            "startColumn" : 27,
            "endLine" : 64,
            "endColumn" : 32
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 109,
      "message" : {
        "text" : "The class 'PhysicalLocation' has a NCSS line count of 10 (Highest = -2147483648)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/JGitSarifParser.java"
          },
          "region" : {
            "startLine" : 67,
            "startColumn" : 31,
            "endLine" : 67,
            "endColumn" : 36
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 110,
      "message" : {
        "text" : "The class 'SarifConverter' has a NCSS line count of 64 (Highest = 46)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/JGitSarifParser.java"
          },
          "region" : {
            "startLine" : 86,
            "startColumn" : 19,
            "endLine" : 86,
            "endColumn" : 24
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 111,
      "message" : {
        "text" : "The method 'convertToSarif(AnalysisResults, boolean)' has a cyclomatic complexity of 5."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/JGitSarifParser.java"
          },
          "region" : {
            "startLine" : 94,
            "startColumn" : 35,
            "endLine" : 94,
            "endColumn" : 49
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 112,
      "message" : {
        "text" : "The method 'extractProperties(Object)' has a cyclomatic complexity of 6."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/JGitSarifParser.java"
          },
          "region" : {
            "startLine" : 159,
            "startColumn" : 44,
            "endLine" : 159,
            "endColumn" : 61
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 113,
      "message" : {
        "text" : "The method 'parseJGit()' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/JGitSarifParser.java"
          },
          "region" : {
            "startLine" : 178,
            "startColumn" : 24,
            "endLine" : 178,
            "endColumn" : 33
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/ESLintSarifParser.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 95,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 114,
      "message" : {
        "text" : "The class 'ESLintSarifParser' has a NCSS line count of 55 (Highest = 52)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/ESLintSarifParser.java"
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 8,
            "endLine" : 9,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 115,
      "message" : {
        "text" : "The method 'parseESLint()' has a cyclomatic complexity of 5."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/ESLintSarifParser.java"
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 24,
            "endLine" : 10,
            "endColumn" : 35
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 116,
      "message" : {
        "text" : "The method 'mapSeverity(int)' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/ESLintSarifParser.java"
          },
          "region" : {
            "startLine" : 87,
            "startColumn" : 27,
            "endLine" : 87,
            "endColumn" : 38
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 117,
      "message" : {
        "text" : "The class 'ConfigParserTest' has a NCSS line count of 14 (Highest = 9)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/org/mining/util/inputparser/ConfigParserTest.java"
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 1,
            "endLine" : 12,
            "endColumn" : 6
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/org/mining/util/LanguageMetrics/MetricAnalyzerTest.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 43,
            "endColumn" : 2
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 118,
      "message" : {
        "text" : "The class 'MetricAnalyzerTest' has a NCSS line count of 17 (Highest = 16)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/org/mining/util/LanguageMetrics/MetricAnalyzerTest.java"
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 1,
            "endLine" : 16,
            "endColumn" : 6
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 119,
      "message" : {
        "text" : "The method 'testRunValidMetrics()' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/org/mining/util/LanguageMetrics/MetricAnalyzerTest.java"
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 10,
            "endLine" : 19,
            "endColumn" : 29
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/SarifMerger.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 71,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 120,
      "message" : {
        "text" : "The class 'SarifMerger' has a NCSS line count of 36 (Highest = 28)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/SarifMerger.java"
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 8,
            "endLine" : 12,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 121,
      "message" : {
        "text" : "The method 'mergeSarifFiles(List<String>, String)' has a cyclomatic complexity of 8."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/SarifMerger.java"
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 24,
            "endLine" : 14,
            "endColumn" : 39
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 122,
      "message" : {
        "text" : "The method 'main(String[])' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/sarifparser/SarifMerger.java"
          },
          "region" : {
            "startLine" : 60,
            "startColumn" : 24,
            "endLine" : 60,
            "endColumn" : 28
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/MetricAnalyzerTest/MetricAnalyzerJavascriptTest.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 159,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 123,
      "message" : {
        "text" : "The class 'MetricAnalyzerJavascriptTest' has a NCSS line count of 94 (Highest = 10)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/MetricAnalyzerTest/MetricAnalyzerJavascriptTest.java"
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 8,
            "endLine" : 17,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 102,
      "message" : {
        "text" : "The method 'setUp()' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/MetricAnalyzerTest/MetricAnalyzerJavascriptTest.java"
          },
          "region" : {
            "startLine" : 23,
            "startColumn" : 17,
            "endLine" : 23,
            "endColumn" : 22
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 124,
      "message" : {
        "text" : "The method 'fileHasLine(String, File)' has a cyclomatic complexity of 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/MetricAnalyzerTest/MetricAnalyzerJavascriptTest.java"
          },
          "region" : {
            "startLine" : 63,
            "startColumn" : 21,
            "endLine" : 63,
            "endColumn" : 32
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/git/GitMetricTest.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 172,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 125,
      "message" : {
        "text" : "The class 'GitMetricTest' has a NCSS line count of 78 (Highest = 24)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/git/GitMetricTest.java"
          },
          "region" : {
            "startLine" : 23,
            "startColumn" : 8,
            "endLine" : 23,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 126,
      "message" : {
        "text" : "The method 'analyze(Map<GitMetricEnum, MetricConfig>)' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/git/GitMetricTest.java"
          },
          "region" : {
            "startLine" : 51,
            "startColumn" : 18,
            "endLine" : 51,
            "endColumn" : 25
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 56,
      "message" : {
        "text" : "The method 'deleteDirectory(File)' has a cyclomatic complexity of 5."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/test/java/git/GitMetricTest.java"
          },
          "region" : {
            "startLine" : 67,
            "startColumn" : 18,
            "endLine" : 67,
            "endColumn" : 33
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/BaseChurn.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 55,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 127,
      "message" : {
        "text" : "The class 'BaseChurn' has a NCSS line count of 27 (Highest = 14)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/BaseChurn.java"
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 8,
            "endLine" : 16,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 128,
      "message" : {
        "text" : "The method 'processFileChanges(Repository, RevCommit, String, Map<String, Map<String, Integer>>, String)' has a cyclomatic complexity of 7."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/BaseChurn.java"
          },
          "region" : {
            "startLine" : 18,
            "startColumn" : 24,
            "endLine" : 18,
            "endColumn" : 42
          }
        }
      } ]
    }, {
      "ruleId" : "ExcessiveParameterList",
      "ruleIndex" : 129,
      "message" : {
        "text" : "Avoid long parameter lists."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/BaseChurn.java"
          },
          "region" : {
            "startLine" : 18,
            "startColumn" : 42,
            "endLine" : 18,
            "endColumn" : 157
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 130,
      "message" : {
        "text" : "The method 'readFileFromCommit(Repository, RevCommit, String)' has a cyclomatic complexity of 2."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/churns/BaseChurn.java"
          },
          "region" : {
            "startLine" : 38,
            "startColumn" : 26,
            "endLine" : 38,
            "endColumn" : 44
          }
        }
      } ]
    }, {
      "ruleId" : "CouplingBetweenObjects",
      "ruleIndex" : 1,
      "message" : {
        "text" : "High amount of different objects as members denotes a high coupling"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CommitSize.java"
          },
          "region" : {
            "startLine" : 1,
            "startColumn" : 1,
            "endLine" : 138,
            "endColumn" : 3
          }
        }
      } ]
    }, {
      "ruleId" : "NcssCount",
      "ruleIndex" : 131,
      "message" : {
        "text" : "The class 'CommitSize' has a NCSS line count of 63 (Highest = 29)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CommitSize.java"
          },
          "region" : {
            "startLine" : 22,
            "startColumn" : 8,
            "endLine" : 22,
            "endColumn" : 13
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 75,
      "message" : {
        "text" : "The method 'analyze(Repository)' has a cyclomatic complexity of 6."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CommitSize.java"
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 17,
            "endLine" : 33,
            "endColumn" : 24
          }
        }
      } ]
    }, {
      "ruleId" : "CyclomaticComplexity",
      "ruleIndex" : 132,
      "message" : {
        "text" : "The method 'analyzeCommitDiff(Repository, RevCommit, RevCommit)' has a cyclomatic complexity of 6."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:///G:/2ndYear/Q5/ISEP/source_code/CodeSniff/src/main/java/org/mining/util/gitmetrics/metrics/CommitSize.java"
          },
          "region" : {
            "startLine" : 61,
            "startColumn" : 18,
            "endLine" : 61,
            "endColumn" : 35
          }
        }
      } ]
    } ],
    "invocations" : [ {
      "executionSuccessful" : true,
      "toolConfigurationNotifications" : [ ],
      "toolExecutionNotifications" : [ ]
    } ]
  } ]
}