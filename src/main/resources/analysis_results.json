{"metrics": [
    {
        "metricName": "Commit Size",
        "result": [
            {"totalLinesAdded": 54933},
            {"totalLinesDeleted": 320}
        ]
    },
    {
        "metricName": "CommitFixRevert",
        "result": [
            {
                "date": "Wed Jan 08 13:16:46 CET 2025",
                "author": "Danila",
                "commitID": "8864b9b751ebe67b4d84afe768eb0de2868ba46f",
                "message": "Added JSON output + some fixes\n"
            },
            {
                "date": "Tue Jan 07 22:09:27 CET 2025",
                "author": "LastAdequateCoder",
                "commitID": "69f4fa063ca97cfeabd8695a7efddf48eede238f",
                "message": "CI fix\n"
            },
            {
                "date": "Tue Jan 07 21:08:37 CET 2025",
                "author": "LastAdequateCoder",
                "commitID": "cc506a9a21017bac96a739187e44364a5f6a4608",
                "message": "Several fixes for tests\n"
            },
            {
                "date": "Sun Dec 15 19:53:55 CET 2024",
                "author": "Danila",
                "commitID": "0def3cc2698bf82da0cfc68c020d14ede3175a27",
                "message": "Small fixes\n"
            },
            {
                "date": "Sun Dec 08 03:51:17 CET 2024",
                "author": "LastAdequateCoder",
                "commitID": "ea02fa8c3c07af31acfc1316dd5a766eb6b478d4",
                "message": "Fixing tests\n"
            },
            {
                "date": "Sun Dec 08 03:48:49 CET 2024",
                "author": "LastAdequateCoder",
                "commitID": "8524867394194a80d5f625e07f86383da65b727f",
                "message": "Fixing tests\n"
            }
        ]
    },
    {
        "metricName": "Code Ownership By File",
        "result": {"files": [
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/metrics/CodeChurn.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 3
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/test/resources/pmdTestProperties.json",
                "contributors": [{
                    "author": "AplyQ8",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "AplyQ8"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/JavaParserBaseVisitor.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/metrics/CommitSize.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/metrics/BranchTime.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParser.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/metrics/CommitFrequency.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/GitMetricAnalyzer.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/Python3ParserBase.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/metrics/churns/PythonChurn.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/metrics/CodeOwnershipByFile.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptLexerBase.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/JavaParserBaseListener.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParserBase.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/metrics/churns/JavaScriptChurn.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/test/java/git/GitMetricTest.java",
                "contributors": [
                    {
                        "author": "Danila",
                        "percentage": 75,
                        "changes": 3
                    },
                    {
                        "author": "LastAdequateCoder",
                        "percentage": 25,
                        "changes": 1
                    }
                ],
                "topContributor": {
                    "percentage": 75,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/test/resources/propertiesJavascript.json",
                "contributors": [{
                    "author": "LastAdequateCoder",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "LastAdequateCoder"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/GitMetricAnalyzerBuilder.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/test/resources/TestJavascriptFiles/example.js",
                "contributors": [{
                    "author": "LastAdequateCoder",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "LastAdequateCoder"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/inputparser/CodeAnalysisConfig.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/JavaParserVisitor.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/JavaParser.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/Python3LexerBase.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/Python3ParserVisitor.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/Python3ParserListener.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/Python3Parser.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/Python3Lexer.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": ".gitignore",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/metrics/churns/JavaChurn.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 2
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParserVisitor.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/resources/properties.json",
                "contributors": [
                    {
                        "author": "LastAdequateCoder",
                        "percentage": 50,
                        "changes": 1
                    },
                    {
                        "author": "Danila",
                        "percentage": 50,
                        "changes": 1
                    }
                ],
                "topContributor": {
                    "percentage": 50,
                    "name": "LastAdequateCoder"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptLexer.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/Python3ParserBaseVisitor.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/test/resources/PMDreport.txt",
                "contributors": [{
                    "author": "AplyQ8",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "AplyQ8"
                }
            },
            {
                "filePath": "pom.xml",
                "contributors": [
                    {
                        "author": "Danila",
                        "percentage": 50,
                        "changes": 2
                    },
                    {
                        "author": "LastAdequateCoder",
                        "percentage": 50,
                        "changes": 2
                    }
                ],
                "topContributor": {
                    "percentage": 50,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/Python3ParserBaseListener.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/GitMetricEnum.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/GitMetricFactory.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 2
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/metrics/CommitFixRevert.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParserBaseListener.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/metrics/churns/BaseChurn.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 2
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/test/java/MetricAnalyzerTest/MetricAnalyzerTest.java",
                "contributors": [
                    {
                        "author": "LastAdequateCoder",
                        "percentage": 33.33333333333333,
                        "changes": 1
                    },
                    {
                        "author": "AplyQ8",
                        "percentage": 66.66666666666666,
                        "changes": 2
                    }
                ],
                "topContributor": {
                    "percentage": 66.66666666666667,
                    "name": "AplyQ8"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/LanguageMetrics/LanguageAnalyzer/LanguageMetricGenerator/JavascriptMetrics/JavascriptMethodLength.java",
                "contributors": [{
                    "author": "LastAdequateCoder",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "LastAdequateCoder"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/JSONReflectUtil.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/JavaLexer.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "/dev/null",
                "contributors": [{
                    "author": "LastAdequateCoder",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "LastAdequateCoder"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParserListener.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/JavaScriptParserBaseVisitor.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/metrics/BranchCountWithAuthors.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 2
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/resources/analysis_results.json",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            },
            {
                "filePath": "src/main/java/org/mining/util/gitmetrics/antlr/JavaParserListener.java",
                "contributors": [{
                    "author": "Danila",
                    "percentage": 100,
                    "changes": 1
                }],
                "topContributor": {
                    "percentage": 100,
                    "name": "Danila"
                }
            }
        ]}
    },
    {
        "metricName": "Branch Time",
        "result": "No merged branches to calculate average branch time."
    },
    {
        "metricName": "Commit Frequency",
        "result": [
            {
                "date": "2024-12-08",
                "commits": 4
            },
            {
                "date": "2024-12-15",
                "commits": 3
            },
            {
                "date": "2025-01-07",
                "commits": 2
            },
            {
                "date": "2025-01-08",
                "commits": 1
            }
        ]
    },
    {
        "metricName": "Branch Count with Authors",
        "result": {
            "totalBranchCount": 11,
            "authors": [
                {
                    "author": "aakashhuilgol",
                    "branches": [{"branchName": "refs/remotes/origin/pipeline_integration"}]
                },
                {
                    "author": "LastAdequateCoder",
                    "branches": [
                        {"branchName": "refs/heads/FixTestsJavascript"},
                        {"branchName": "refs/heads/JavascriptMetrics"},
                        {"branchName": "refs/remotes/origin/FixTestsJavascript"},
                        {"branchName": "refs/remotes/origin/JavascriptMetrics"},
                        {"branchName": "refs/remotes/origin/LastAdequateCoder-CI"}
                    ]
                },
                {
                    "author": "Danila",
                    "branches": [
                        {"branchName": "refs/heads/InputParser"},
                        {"branchName": "refs/heads/main"},
                        {"branchName": "refs/remotes/origin/HEAD"},
                        {"branchName": "refs/remotes/origin/main"}
                    ]
                },
                {
                    "author": "AplyQ8",
                    "branches": [{"branchName": "refs/remotes/origin/MetricPartRefactoring"}]
                }
            ]
        }
    },
    {
        "metricName": "Code Churn",
        "result": {"files": [
            {
                "filePath": "BranchTime.java",
                "methods": [
                    {
                        "methodName": "void analyze(Repository repository)",
                        "modifications": 1
                    },
                    {
                        "methodName": "RevCommit getFirstUniqueCommit(Repository repository, Ref branch)",
                        "modifications": 1
                    },
                    {
                        "methodName": "RevCommit getMergeCommit(Repository repository, Ref branch)",
                        "modifications": 1
                    },
                    {
                        "methodName": "JSONObject returnJSONResult()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String toString()",
                        "modifications": 1
                    },
                    {
                        "methodName": "long calculateBranchLifetime(Repository repository, Ref branch)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<Long> returnResult()",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "JavaParser.java",
                "methods": [
                    {
                        "methodName": "ResourcesContext resources()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<LambdaLVTIParameterContext> lambdaLVTIParameter()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode OPENS()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode VOID()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode NATIVE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TypeBoundContext typeBound()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ExpressionContext expression()",
                        "modifications": 17
                    },
                    {
                        "methodName": "ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix()",
                        "modifications": 3
                    },
                    {
                        "methodName": "FloatLiteralContext floatLiteral()",
                        "modifications": 2
                    },
                    {
                        "methodName": "VariableInitializerContext variableInitializer()",
                        "modifications": 3
                    },
                    {
                        "methodName": "AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ReceiverParameterContext receiverParameter()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode TO()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode RSHIFT_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode BYTE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode STATIC()",
                        "modifications": 5
                    },
                    {
                        "methodName": "RecordDeclarationContext recordDeclaration()",
                        "modifications": 6
                    },
                    {
                        "methodName": "TerminalNode LBRACE()",
                        "modifications": 11
                    },
                    {
                        "methodName": "TerminalNode TEXT_BLOCK()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode CHAR()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode WHILE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode GT()",
                        "modifications": 5
                    },
                    {
                        "methodName": "List<CatchClauseContext> catchClause()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<SwitchBlockStatementGroupContext> switchBlockStatementGroup()",
                        "modifications": 1
                    },
                    {
                        "methodName": "InnerCreatorContext innerCreator()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode CLASS()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ClassOrInterfaceTypeContext classOrInterfaceType()",
                        "modifications": 4
                    },
                    {
                        "methodName": "TerminalNode PROTECTED()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode DO()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode DEC()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<TerminalNode> GT()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean expression_sempred(ExpressionContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "MethodBodyContext methodBody()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode DOUBLE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode IDENTIFIER()",
                        "modifications": 3
                    },
                    {
                        "methodName": "ClassCreatorRestContext classCreatorRest()",
                        "modifications": 3
                    },
                    {
                        "methodName": "List<RecordComponentContext> recordComponent()",
                        "modifications": 1
                    },
                    {
                        "methodName": "SwitchLabeledRuleContext switchLabeledRule(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "BlockStatementContext blockStatement(int i)",
                        "modifications": 3
                    },
                    {
                        "methodName": "ArgumentsContext arguments()",
                        "modifications": 7
                    },
                    {
                        "methodName": "TerminalNode LONG()",
                        "modifications": 1
                    },
                    {
                        "methodName": "RecordComponentListContext recordComponentList()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<InterfaceBodyDeclarationContext> interfaceBodyDeclaration()",
                        "modifications": 1
                    },
                    {
                        "methodName": "CompilationUnitContext compilationUnit()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode SUB()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ClassTypeContext classType()",
                        "modifications": 2
                    },
                    {
                        "methodName": "T accept(ParseTreeVisitor<?extendsT> visitor)",
                        "modifications": 139
                    },
                    {
                        "methodName": "TerminalNode DECIMAL_LITERAL()",
                        "modifications": 1
                    },
                    {
                        "methodName": "FormalParameterListContext formalParameterList()",
                        "modifications": 3
                    },
                    {
                        "methodName": "String[] makeSymbolicNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "SwitchRuleOutcomeContext switchRuleOutcome()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<ClassBodyDeclarationContext> classBodyDeclaration()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode EOF()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TerminalNode> LT()",
                        "modifications": 1
                    },
                    {
                        "methodName": "InterfaceMethodModifierContext interfaceMethodModifier(int i)",
                        "modifications": 2
                    },
                    {
                        "methodName": "ExplicitGenericInvocationContext explicitGenericInvocation()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode GE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ElementValueArrayInitializerContext elementValueArrayInitializer()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode BITOR(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<VariableModifierContext> variableModifier()",
                        "modifications": 9
                    },
                    {
                        "methodName": "SwitchLabelContext switchLabel()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TypeParameterContext typeParameter(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<InterfaceMethodModifierContext> interfaceMethodModifier()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode STRING_LITERAL()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TypeArgumentContext> typeArgument()",
                        "modifications": 1
                    },
                    {
                        "methodName": "AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<VariableDeclaratorContext> variableDeclarator()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode AT()",
                        "modifications": 3
                    },
                    {
                        "methodName": "String[] makeLiteralNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "GuardedPatternContext guardedPattern()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TypeTypeOrVoidContext typeTypeOrVoid()",
                        "modifications": 4
                    },
                    {
                        "methodName": "ModuleDeclarationContext moduleDeclaration()",
                        "modifications": 2
                    },
                    {
                        "methodName": "PackageDeclarationContext packageDeclaration()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode CONTINUE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "VariableModifierContext variableModifier()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode LT()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode EXTENDS()",
                        "modifications": 4
                    },
                    {
                        "methodName": "FormalParametersContext formalParameters()",
                        "modifications": 4
                    },
                    {
                        "methodName": "TerminalNode HEX_FLOAT_LITERAL()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ElementValuePairContext elementValuePair()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode RBRACK()",
                        "modifications": 1
                    },
                    {
                        "methodName": "GenericMethodDeclarationContext genericMethodDeclaration()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode FINAL()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<ElementValuePairContext> elementValuePair()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode CATCH()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ImportDeclarationContext importDeclaration(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<ModifierContext> modifier()",
                        "modifications": 4
                    },
                    {
                        "methodName": "TerminalNode BINARY_LITERAL()",
                        "modifications": 1
                    },
                    {
                        "methodName": "SwitchLabelContext switchLabel(int i)",
                        "modifications": 2
                    },
                    {
                        "methodName": "MethodCallContext methodCall()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode TRY()",
                        "modifications": 1
                    },
                    {
                        "methodName": "LiteralContext literal()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode YIELD()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TypeArgumentsContext typeArguments()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode RPAREN()",
                        "modifications": 13
                    },
                    {
                        "methodName": "TerminalNode NOTEQUAL()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String getGrammarFileName()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String getSerializedATN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "CompactConstructorDeclarationContext compactConstructorDeclaration(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode EXPORTS()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode BANG()",
                        "modifications": 1
                    },
                    {
                        "methodName": "int getRuleIndex()",
                        "modifications": 126
                    },
                    {
                        "methodName": "TerminalNode BITAND(int i)",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode URSHIFT_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<ModuleDirectiveContext> moduleDirective()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ForInitContext forInit()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TypeParameterContext typeParameter()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode LE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode PRIVATE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode REQUIRES()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode OR()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Vocabulary getVocabulary()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ClassOrInterfaceModifierContext classOrInterfaceModifier(int i)",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode IMPLEMENTS()",
                        "modifications": 3
                    },
                    {
                        "methodName": "List<TerminalNode> DOT()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode GT(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "InterfaceCommonBodyDeclarationContext interfaceCommonBodyDeclaration()",
                        "modifications": 3
                    },
                    {
                        "methodName": "AnnotationMethodRestContext annotationMethodRest()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode FLOAT()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode DOT()",
                        "modifications": 5
                    },
                    {
                        "methodName": "VariableDeclaratorsContext variableDeclarators()",
                        "modifications": 4
                    },
                    {
                        "methodName": "TerminalNode PERMITS()",
                        "modifications": 4
                    },
                    {
                        "methodName": "InterfaceBodyDeclarationContext interfaceBodyDeclaration()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<ExpressionContext> expression()",
                        "modifications": 7
                    },
                    {
                        "methodName": "TerminalNode MOD()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode THIS()",
                        "modifications": 4
                    },
                    {
                        "methodName": "EnumDeclarationContext enumDeclaration()",
                        "modifications": 5
                    },
                    {
                        "methodName": "List<TerminalNode> BITOR()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getTokenNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ConstructorDeclarationContext constructorDeclaration()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TypeArgumentsContext typeArguments(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "MemberDeclarationContext memberDeclaration()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode STRICTFP()",
                        "modifications": 2
                    },
                    {
                        "methodName": "SuperSuffixContext superSuffix()",
                        "modifications": 3
                    },
                    {
                        "methodName": "List<IdentifierContext> identifier()",
                        "modifications": 6
                    },
                    {
                        "methodName": "VariableDeclaratorIdContext variableDeclaratorId()",
                        "modifications": 6
                    },
                    {
                        "methodName": "PrimaryContext primary()",
                        "modifications": 2
                    },
                    {
                        "methodName": "CreatedNameContext createdName()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode FLOAT_LITERAL()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode CARET()",
                        "modifications": 1
                    },
                    {
                        "methodName": "IdentifierContext identifier()",
                        "modifications": 33
                    },
                    {
                        "methodName": "ResourceContext resource(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "PrimitiveTypeContext primitiveType()",
                        "modifications": 3
                    },
                    {
                        "methodName": "ModuleDirectiveContext moduleDirective()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode FINALLY()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ExpressionContext expression(int _p)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode CHAR_LITERAL()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] makeRuleNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ModuleBodyContext moduleBody()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<ResourceContext> resource()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TypeTypeContext typeType()",
                        "modifications": 18
                    },
                    {
                        "methodName": "CompactConstructorDeclarationContext compactConstructorDeclaration()",
                        "modifications": 1
                    },
                    {
                        "methodName": "EnumConstantContext enumConstant(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "ModifierContext modifier(int i)",
                        "modifications": 4
                    },
                    {
                        "methodName": "ResourceSpecificationContext resourceSpecification()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<TypeArgumentsOrDiamondContext> typeArgumentsOrDiamond()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode RECORD()",
                        "modifications": 3
                    },
                    {
                        "methodName": "List<TerminalNode> RBRACK()",
                        "modifications": 6
                    },
                    {
                        "methodName": "TerminalNode USES()",
                        "modifications": 3
                    },
                    {
                        "methodName": "SwitchBlockStatementGroupContext switchBlockStatementGroup()",
                        "modifications": 1
                    },
                    {
                        "methodName": "AnnotationTypeDeclarationContext annotationTypeDeclaration()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode THROW()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ClassBodyContext classBody()",
                        "modifications": 4
                    },
                    {
                        "methodName": "List<CompactConstructorDeclarationContext> compactConstructorDeclaration()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ConstDeclarationContext constDeclaration()",
                        "modifications": 2
                    },
                    {
                        "methodName": "RequiresModifierContext requiresModifier()",
                        "modifications": 1
                    },
                    {
                        "methodName": "SwitchLabeledRuleContext switchLabeledRule()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ExpressionListContext expressionList()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode BREAK()",
                        "modifications": 1
                    },
                    {
                        "methodName": "CatchClauseContext catchClause()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode INSTANCEOF()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode DIV_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "LambdaBodyContext lambdaBody()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode MUL()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<TypeTypeContext> typeType()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode SYNCHRONIZED()",
                        "modifications": 2
                    },
                    {
                        "methodName": "AnnotationMethodOrConstantRestContext annotationMethodOrConstantRest()",
                        "modifications": 2
                    },
                    {
                        "methodName": "LocalVariableDeclarationContext localVariableDeclaration()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode COLONCOLON()",
                        "modifications": 1
                    },
                    {
                        "methodName": "FormalParameterContext formalParameter(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode BITOR()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode MOD_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode PACKAGE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "QualifiedNameListContext qualifiedNameList()",
                        "modifications": 4
                    },
                    {
                        "methodName": "InterfaceMethodModifierContext interfaceMethodModifier()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode LSHIFT_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "QualifiedNameContext qualifiedName()",
                        "modifications": 6
                    },
                    {
                        "methodName": "TerminalNode LPAREN()",
                        "modifications": 13
                    },
                    {
                        "methodName": "void copyFrom(ExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "CreatorContext creator()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ATN getATN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitRule(ParseTreeListener listener)",
                        "modifications": 139
                    },
                    {
                        "methodName": "TerminalNode MODULE()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode ELLIPSIS()",
                        "modifications": 1
                    },
                    {
                        "methodName": "FinallyBlockContext finallyBlock()",
                        "modifications": 2
                    },
                    {
                        "methodName": "VariableDeclaratorContext variableDeclarator()",
                        "modifications": 1
                    },
                    {
                        "methodName": "BlockStatementContext blockStatement()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TerminalNode> BITAND()",
                        "modifications": 2
                    },
                    {
                        "methodName": "LambdaExpressionContext lambdaExpression()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<TypeParameterContext> typeParameter()",
                        "modifications": 1
                    },
                    {
                        "methodName": "GenericInterfaceMethodDeclarationContext genericInterfaceMethodDeclaration()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TypeListContext typeList()",
                        "modifications": 4
                    },
                    {
                        "methodName": "InterfaceMethodDeclarationContext interfaceMethodDeclaration()",
                        "modifications": 2
                    },
                    {
                        "methodName": "StatementContext statement()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<ConstantDeclaratorContext> constantDeclarator()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode ADD()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode SEMI()",
                        "modifications": 14
                    },
                    {
                        "methodName": "TerminalNode AND_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "FormalParameterContext formalParameter()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode OPEN()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode SWITCH()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode LT(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<VariableInitializerContext> variableInitializer()",
                        "modifications": 1
                    },
                    {
                        "methodName": "IdentifierContext identifier(int i)",
                        "modifications": 6
                    },
                    {
                        "methodName": "CatchTypeContext catchType()",
                        "modifications": 2
                    },
                    {
                        "methodName": "CatchClauseContext catchClause(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode ASSIGN()",
                        "modifications": 6
                    },
                    {
                        "methodName": "ElementValueContext elementValue(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode MUL_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "QualifiedNameContext qualifiedName(int i)",
                        "modifications": 3
                    },
                    {
                        "methodName": "StatementContext statement(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<AnnotationContext> annotation()",
                        "modifications": 11
                    },
                    {
                        "methodName": "List<SwitchLabelContext> switchLabel()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TypeIdentifierContext typeIdentifier()",
                        "modifications": 2
                    },
                    {
                        "methodName": "SwitchExpressionContext switchExpression()",
                        "modifications": 3
                    },
                    {
                        "methodName": "EnumBodyDeclarationsContext enumBodyDeclarations()",
                        "modifications": 2
                    },
                    {
                        "methodName": "NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode QUESTION()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode LBRACK(int i)",
                        "modifications": 6
                    },
                    {
                        "methodName": "TerminalNode DEFAULT()",
                        "modifications": 4
                    },
                    {
                        "methodName": "LambdaParametersContext lambdaParameters()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<TerminalNode> COMMA()",
                        "modifications": 15
                    },
                    {
                        "methodName": "ElementValuePairsContext elementValuePairs()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<TypeListContext> typeList()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ConstantDeclaratorContext constantDeclarator(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode TILDE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "AnnotationContext annotation(int i)",
                        "modifications": 11
                    },
                    {
                        "methodName": "List<StatementContext> statement()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<ClassOrInterfaceModifierContext> classOrInterfaceModifier()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<TerminalNode> LBRACK()",
                        "modifications": 6
                    },
                    {
                        "methodName": "EnumConstantContext enumConstant()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode BOOL_LITERAL()",
                        "modifications": 1
                    },
                    {
                        "methodName": "AnnotationTypeElementRestContext annotationTypeElementRest()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode XOR_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TypeArgumentsContext> typeArguments()",
                        "modifications": 1
                    },
                    {
                        "methodName": "RecordComponentContext recordComponent(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode FOR()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TypeArgumentsOrDiamondContext typeArgumentsOrDiamond()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode ENUM()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ParExpressionContext parExpression()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode SEALED()",
                        "modifications": 3
                    },
                    {
                        "methodName": "ElementValuePairContext elementValuePair(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getRuleNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "FieldDeclarationContext fieldDeclaration()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode RBRACK(int i)",
                        "modifications": 6
                    },
                    {
                        "methodName": "TerminalNode SUPER()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode BOOLEAN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode DOT(int i)",
                        "modifications": 5
                    },
                    {
                        "methodName": "boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "RecordBodyContext recordBody()",
                        "modifications": 2
                    },
                    {
                        "methodName": "RecordComponentContext recordComponent()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ClassOrInterfaceModifierContext classOrInterfaceModifier()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ClassBodyDeclarationContext classBodyDeclaration(int i)",
                        "modifications": 3
                    },
                    {
                        "methodName": "TypeArgumentContext typeArgument(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "ModuleDirectiveContext moduleDirective(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode AND()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TypeDeclarationContext> typeDeclaration()",
                        "modifications": 1
                    },
                    {
                        "methodName": "LastFormalParameterContext lastFormalParameter()",
                        "modifications": 2
                    },
                    {
                        "methodName": "GuardedPatternContext guardedPattern(int _p)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode RETURN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "LambdaLVTIParameterContext lambdaLVTIParameter(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode COMMA(int i)",
                        "modifications": 15
                    },
                    {
                        "methodName": "InterfaceDeclarationContext interfaceDeclaration()",
                        "modifications": 6
                    },
                    {
                        "methodName": "TerminalNode INTERFACE()",
                        "modifications": 2
                    },
                    {
                        "methodName": "VariableModifierContext variableModifier(int i)",
                        "modifications": 9
                    },
                    {
                        "methodName": "TerminalNode WITH()",
                        "modifications": 3
                    },
                    {
                        "methodName": "List<BlockStatementContext> blockStatement()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode ARROW()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<TerminalNode> AND()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode SUB_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "EnumConstantsContext enumConstants()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TypeArgumentContext typeArgument()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TypeListContext typeList(int i)",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode ADD_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode EQUAL()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ArrayCreatorRestContext arrayCreatorRest()",
                        "modifications": 2
                    },
                    {
                        "methodName": "AltAnnotationQualifiedNameContext altAnnotationQualifiedName()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode LBRACK()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode COMMA()",
                        "modifications": 2
                    },
                    {
                        "methodName": "VariableDeclaratorContext variableDeclarator(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "RequiresModifierContext requiresModifier(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "InterfaceBodyContext interfaceBody()",
                        "modifications": 2
                    },
                    {
                        "methodName": "VariableInitializerContext variableInitializer(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode OCT_LITERAL()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode ELSE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode TRANSIENT()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ClassBodyDeclarationContext classBodyDeclaration()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode COLON()",
                        "modifications": 5
                    },
                    {
                        "methodName": "IntegerLiteralContext integerLiteral()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TypeArgumentsOrDiamondContext typeArgumentsOrDiamond(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TerminalNode> SEMI()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TypeDeclarationContext typeDeclaration(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "LambdaLVTIListContext lambdaLVTIList()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode ABSTRACT()",
                        "modifications": 2
                    },
                    {
                        "methodName": "LambdaLVTIParameterContext lambdaLVTIParameter()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ForControlContext forControl()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode PROVIDES()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode ASSERT()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode TRANSITIVE()",
                        "modifications": 3
                    },
                    {
                        "methodName": "DefaultValueContext defaultValue()",
                        "modifications": 2
                    },
                    {
                        "methodName": "void enterRule(ParseTreeListener listener)",
                        "modifications": 139
                    },
                    {
                        "methodName": "SwitchBlockStatementGroupContext switchBlockStatementGroup(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "ImportDeclarationContext importDeclaration()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ArrayInitializerContext arrayInitializer()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode NEW()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode INC()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TypeParametersContext typeParameters()",
                        "modifications": 7
                    },
                    {
                        "methodName": "NonWildcardTypeArgumentsContext nonWildcardTypeArguments()",
                        "modifications": 6
                    },
                    {
                        "methodName": "List<FormalParameterContext> formalParameter()",
                        "modifications": 1
                    },
                    {
                        "methodName": "AnnotationConstantRestContext annotationConstantRest()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode VOLATILE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode INT()",
                        "modifications": 1
                    },
                    {
                        "methodName": "AnnotationTypeBodyContext annotationTypeBody()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode SEMI(int i)",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode VAR()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode THROWS()",
                        "modifications": 3
                    },
                    {
                        "methodName": "ResourceContext resource()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ModifierContext modifier()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode NULL_LITERAL()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ExpressionContext expression(int i)",
                        "modifications": 7
                    },
                    {
                        "methodName": "TerminalNode IF()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode SHORT()",
                        "modifications": 1
                    },
                    {
                        "methodName": "InterfaceMemberDeclarationContext interfaceMemberDeclaration()",
                        "modifications": 2
                    },
                    {
                        "methodName": "MethodDeclarationContext methodDeclaration()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode IMPORT()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode OR_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<SwitchLabeledRuleContext> switchLabeledRule()",
                        "modifications": 1
                    },
                    {
                        "methodName": "LocalTypeDeclarationContext localTypeDeclaration()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TypeDeclarationContext typeDeclaration()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode CASE()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<RequiresModifierContext> requiresModifier()",
                        "modifications": 1
                    },
                    {
                        "methodName": "RecordHeaderContext recordHeader()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<ImportDeclarationContext> importDeclaration()",
                        "modifications": 1
                    },
                    {
                        "methodName": "BlockContext block()",
                        "modifications": 10
                    },
                    {
                        "methodName": "ConstantDeclaratorContext constantDeclarator()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<QualifiedNameContext> qualifiedName()",
                        "modifications": 3
                    },
                    {
                        "methodName": "InterfaceBodyDeclarationContext interfaceBodyDeclaration(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<ElementValueContext> elementValue()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode RBRACE()",
                        "modifications": 11
                    },
                    {
                        "methodName": "TerminalNode BITAND()",
                        "modifications": 1
                    },
                    {
                        "methodName": "AnnotationContext annotation()",
                        "modifications": 5
                    },
                    {
                        "methodName": "List<AnnotationTypeElementDeclarationContext> annotationTypeElementDeclaration()",
                        "modifications": 1
                    },
                    {
                        "methodName": "EnhancedForControlContext enhancedForControl()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode NON_SEALED()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode PUBLIC()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TypeTypeContext typeType(int i)",
                        "modifications": 3
                    },
                    {
                        "methodName": "ElementValueContext elementValue()",
                        "modifications": 4
                    },
                    {
                        "methodName": "ClassDeclarationContext classDeclaration()",
                        "modifications": 6
                    },
                    {
                        "methodName": "GenericConstructorDeclarationContext genericConstructorDeclaration()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode HEX_LITERAL()",
                        "modifications": 1
                    },
                    {
                        "methodName": "PatternContext pattern()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode DIV()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<EnumConstantContext> enumConstant()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode AND(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean guardedPattern_sempred(GuardedPatternContext _localctx, int predIndex)",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "GitMetricEnum.java",
                "methods": []
            },
            {
                "filePath": "JavaParserVisitor.java",
                "methods": []
            },
            {
                "filePath": "JavaParserBaseListener.java",
                "methods": [
                    {
                        "methodName": "void enterTypeDeclaration(JavaParser.TypeDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitRequiresModifier(JavaParser.RequiresModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterBlockStatement(JavaParser.BlockStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMemberReferenceExpression(JavaParser.MemberReferenceExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterIdentifier(JavaParser.IdentifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterModuleDirective(JavaParser.ModuleDirectiveContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterRecordHeader(JavaParser.RecordHeaderContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitReceiverParameter(JavaParser.ReceiverParameterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterConstructorDeclaration(JavaParser.ConstructorDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitRecordComponentList(JavaParser.RecordComponentListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitInterfaceBodyDeclaration(JavaParser.InterfaceBodyDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterRequiresModifier(JavaParser.RequiresModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAltAnnotationQualifiedName(JavaParser.AltAnnotationQualifiedNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFormalParameters(JavaParser.FormalParametersContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitRecordBody(JavaParser.RecordBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitBlock(JavaParser.BlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitCatchClause(JavaParser.CatchClauseContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterResources(JavaParser.ResourcesContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTypeList(JavaParser.TypeListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSwitchBlockStatementGroup(JavaParser.SwitchBlockStatementGroupContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitClassOrInterfaceType(JavaParser.ClassOrInterfaceTypeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLambdaExpression(JavaParser.LambdaExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitEnumDeclaration(JavaParser.EnumDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLambdaLVTIList(JavaParser.LambdaLVTIListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitModuleBody(JavaParser.ModuleBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitConstantDeclarator(JavaParser.ConstantDeclaratorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterCastExpression(JavaParser.CastExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPackageDeclaration(JavaParser.PackageDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAnnotationTypeBody(JavaParser.AnnotationTypeBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImportDeclaration(JavaParser.ImportDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitElementValue(JavaParser.ElementValueContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSwitchLabeledRule(JavaParser.SwitchLabeledRuleContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterArrayCreatorRest(JavaParser.ArrayCreatorRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterEnumConstant(JavaParser.EnumConstantContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSwitchRuleOutcome(JavaParser.SwitchRuleOutcomeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSwitchBlockStatementGroup(JavaParser.SwitchBlockStatementGroupContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterIntegerLiteral(JavaParser.IntegerLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterClassDeclaration(JavaParser.ClassDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitModifier(JavaParser.ModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitCatchType(JavaParser.CatchTypeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSquareBracketExpression(JavaParser.SquareBracketExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMethodReferenceExpression(JavaParser.MethodReferenceExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAnnotationMethodRest(JavaParser.AnnotationMethodRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitRecordComponent(JavaParser.RecordComponentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterForControl(JavaParser.ForControlContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMethodBody(JavaParser.MethodBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFormalParameters(JavaParser.FormalParametersContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLocalVariableDeclaration(JavaParser.LocalVariableDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMethodCall(JavaParser.MethodCallContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitInterfaceMemberDeclaration(JavaParser.InterfaceMemberDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLambdaParameters(JavaParser.LambdaParametersContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterStatement(JavaParser.StatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTypeBound(JavaParser.TypeBoundContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLiteral(JavaParser.LiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAltAnnotationQualifiedName(JavaParser.AltAnnotationQualifiedNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterClassOrInterfaceType(JavaParser.ClassOrInterfaceTypeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterBlock(JavaParser.BlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMethodReferenceExpression(JavaParser.MethodReferenceExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExpressionLambda(JavaParser.ExpressionLambdaContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterResourceSpecification(JavaParser.ResourceSpecificationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMethodCallExpression(JavaParser.MethodCallExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTypeType(JavaParser.TypeTypeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterNonWildcardTypeArguments(JavaParser.NonWildcardTypeArgumentsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPackageDeclaration(JavaParser.PackageDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitElementValueArrayInitializer(JavaParser.ElementValueArrayInitializerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterCreator(JavaParser.CreatorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExplicitGenericInvocation(JavaParser.ExplicitGenericInvocationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPrimary(JavaParser.PrimaryContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterGenericMethodDeclaration(JavaParser.GenericMethodDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterVariableInitializer(JavaParser.VariableInitializerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLastFormalParameter(JavaParser.LastFormalParameterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLambdaBody(JavaParser.LambdaBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExplicitGenericInvocationSuffix(JavaParser.ExplicitGenericInvocationSuffixContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFieldDeclaration(JavaParser.FieldDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitInterfaceMethodDeclaration(JavaParser.InterfaceMethodDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitForControl(JavaParser.ForControlContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAnnotation(JavaParser.AnnotationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterClassOrInterfaceModifier(JavaParser.ClassOrInterfaceModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterElementValuePairs(JavaParser.ElementValuePairsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitEnhancedForControl(JavaParser.EnhancedForControlContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitCreatedName(JavaParser.CreatedNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFieldDeclaration(JavaParser.FieldDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitGenericConstructorDeclaration(JavaParser.GenericConstructorDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAnnotationMethodOrConstantRest(JavaParser.AnnotationMethodOrConstantRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterCreatedName(JavaParser.CreatedNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterClassBody(JavaParser.ClassBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTypeParameter(JavaParser.TypeParameterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterInterfaceDeclaration(JavaParser.InterfaceDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExplicitGenericInvocation(JavaParser.ExplicitGenericInvocationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterRecordBody(JavaParser.RecordBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterModifier(JavaParser.ModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitInterfaceCommonBodyDeclaration(JavaParser.InterfaceCommonBodyDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFormalParameter(JavaParser.FormalParameterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMethodCallExpression(JavaParser.MethodCallExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExpressionLambda(JavaParser.ExpressionLambdaContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAnnotationTypeElementRest(JavaParser.AnnotationTypeElementRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitVariableModifier(JavaParser.VariableModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMethodDeclaration(JavaParser.MethodDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterForInit(JavaParser.ForInitContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLambdaBody(JavaParser.LambdaBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLocalVariableDeclaration(JavaParser.LocalVariableDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImportDeclaration(JavaParser.ImportDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitClassDeclaration(JavaParser.ClassDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitDefaultValue(JavaParser.DefaultValueContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterResource(JavaParser.ResourceContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPostIncrementDecrementOperatorExpression(JavaParser.PostIncrementDecrementOperatorExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterGuardedPattern(JavaParser.GuardedPatternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterRecordComponentList(JavaParser.RecordComponentListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitIdentifier(JavaParser.IdentifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLocalTypeDeclaration(JavaParser.LocalTypeDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLocalTypeDeclaration(JavaParser.LocalTypeDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitEnumConstants(JavaParser.EnumConstantsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTypeType(JavaParser.TypeTypeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMethodCall(JavaParser.MethodCallContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitQualifiedName(JavaParser.QualifiedNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitConstructorDeclaration(JavaParser.ConstructorDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMemberReferenceExpression(JavaParser.MemberReferenceExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterClassType(JavaParser.ClassTypeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTypeArguments(JavaParser.TypeArgumentsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitGenericMethodDeclaration(JavaParser.GenericMethodDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterVariableDeclaratorId(JavaParser.VariableDeclaratorIdContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitUnaryOperatorExpression(JavaParser.UnaryOperatorExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitCastExpression(JavaParser.CastExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterCatchClause(JavaParser.CatchClauseContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterArrayInitializer(JavaParser.ArrayInitializerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitArrayCreatorRest(JavaParser.ArrayCreatorRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMethodBody(JavaParser.MethodBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterInterfaceBody(JavaParser.InterfaceBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitInterfaceMethodModifier(JavaParser.InterfaceMethodModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTypeParameters(JavaParser.TypeParametersContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTypeBound(JavaParser.TypeBoundContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPrimitiveType(JavaParser.PrimitiveTypeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitObjectCreationExpression(JavaParser.ObjectCreationExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitConstDeclaration(JavaParser.ConstDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSwitchRuleOutcome(JavaParser.SwitchRuleOutcomeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterQualifiedName(JavaParser.QualifiedNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterModuleBody(JavaParser.ModuleBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterEnumDeclaration(JavaParser.EnumDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTypeParameter(JavaParser.TypeParameterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAnnotationTypeDeclaration(JavaParser.AnnotationTypeDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterClassCreatorRest(JavaParser.ClassCreatorRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterNonWildcardTypeArgumentsOrDiamond(JavaParser.NonWildcardTypeArgumentsOrDiamondContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterInstanceOfOperatorExpression(JavaParser.InstanceOfOperatorExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void visitErrorNode(ErrorNode node)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterGenericConstructorDeclaration(JavaParser.GenericConstructorDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTypeIdentifier(JavaParser.TypeIdentifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitCreator(JavaParser.CreatorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitNonWildcardTypeArgumentsOrDiamond(JavaParser.NonWildcardTypeArgumentsOrDiamondContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterInnerCreator(JavaParser.InnerCreatorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAnnotationTypeElementDeclaration(JavaParser.AnnotationTypeElementDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTypeTypeOrVoid(JavaParser.TypeTypeOrVoidContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAnnotationTypeElementDeclaration(JavaParser.AnnotationTypeElementDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitClassOrInterfaceModifier(JavaParser.ClassOrInterfaceModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitModuleDirective(JavaParser.ModuleDirectiveContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitEnumConstant(JavaParser.EnumConstantContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitVariableDeclaratorId(JavaParser.VariableDeclaratorIdContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitBinaryOperatorExpression(JavaParser.BinaryOperatorExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitClassCreatorRest(JavaParser.ClassCreatorRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterRecordComponent(JavaParser.RecordComponentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSwitchLabeledRule(JavaParser.SwitchLabeledRuleContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitVariableInitializer(JavaParser.VariableInitializerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLastFormalParameter(JavaParser.LastFormalParameterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExplicitGenericInvocationSuffix(JavaParser.ExplicitGenericInvocationSuffixContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterUnaryOperatorExpression(JavaParser.UnaryOperatorExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterVariableDeclarator(JavaParser.VariableDeclaratorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterParExpression(JavaParser.ParExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitInstanceOfOperatorExpression(JavaParser.InstanceOfOperatorExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLiteral(JavaParser.LiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitElementValuePairs(JavaParser.ElementValuePairsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExpressionList(JavaParser.ExpressionListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterGenericInterfaceMethodDeclaration(JavaParser.GenericInterfaceMethodDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitEveryRule(ParserRuleContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMethodDeclaration(JavaParser.MethodDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterCompactConstructorDeclaration(JavaParser.CompactConstructorDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFloatLiteral(JavaParser.FloatLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitArrayInitializer(JavaParser.ArrayInitializerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTypeTypeOrVoid(JavaParser.TypeTypeOrVoidContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAnnotation(JavaParser.AnnotationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMemberDeclaration(JavaParser.MemberDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitElementValuePair(JavaParser.ElementValuePairContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterVariableDeclarators(JavaParser.VariableDeclaratorsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitGenericInterfaceMethodDeclaration(JavaParser.GenericInterfaceMethodDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterReceiverParameter(JavaParser.ReceiverParameterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitParExpression(JavaParser.ParExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterElementValuePair(JavaParser.ElementValuePairContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFormalParameter(JavaParser.FormalParameterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTypeIdentifier(JavaParser.TypeIdentifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitForInit(JavaParser.ForInitContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitResource(JavaParser.ResourceContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTypeDeclaration(JavaParser.TypeDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitClassBody(JavaParser.ClassBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterDefaultValue(JavaParser.DefaultValueContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterConstDeclaration(JavaParser.ConstDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterArguments(JavaParser.ArgumentsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitResourceSpecification(JavaParser.ResourceSpecificationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void visitTerminal(TerminalNode node)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExpressionSwitch(JavaParser.ExpressionSwitchContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterVariableModifier(JavaParser.VariableModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterInterfaceBodyDeclaration(JavaParser.InterfaceBodyDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitClassType(JavaParser.ClassTypeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSuperSuffix(JavaParser.SuperSuffixContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSwitchExpression(JavaParser.SwitchExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSwitchExpression(JavaParser.SwitchExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAnnotationConstantRest(JavaParser.AnnotationConstantRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterCatchType(JavaParser.CatchTypeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPattern(JavaParser.PatternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitInnerCreator(JavaParser.InnerCreatorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterInterfaceCommonBodyDeclaration(JavaParser.InterfaceCommonBodyDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterBinaryOperatorExpression(JavaParser.BinaryOperatorExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitArguments(JavaParser.ArgumentsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterEnhancedForControl(JavaParser.EnhancedForControlContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterElementValue(JavaParser.ElementValueContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterInterfaceMethodModifier(JavaParser.InterfaceMethodModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMemberDeclaration(JavaParser.MemberDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitVariableDeclarators(JavaParser.VariableDeclaratorsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFinallyBlock(JavaParser.FinallyBlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTypeParameters(JavaParser.TypeParametersContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPrimaryExpression(JavaParser.PrimaryExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitInterfaceDeclaration(JavaParser.InterfaceDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitBlockStatement(JavaParser.BlockStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPrimary(JavaParser.PrimaryContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitInterfaceBody(JavaParser.InterfaceBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSwitchLabel(JavaParser.SwitchLabelContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFormalParameterList(JavaParser.FormalParameterListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPrimitiveType(JavaParser.PrimitiveTypeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitRecordHeader(JavaParser.RecordHeaderContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitQualifiedNameList(JavaParser.QualifiedNameListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterQualifiedNameList(JavaParser.QualifiedNameListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTernaryExpression(JavaParser.TernaryExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLambdaParameters(JavaParser.LambdaParametersContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTypeArgument(JavaParser.TypeArgumentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitResources(JavaParser.ResourcesContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTernaryExpression(JavaParser.TernaryExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterObjectCreationExpression(JavaParser.ObjectCreationExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterInterfaceMethodDeclaration(JavaParser.InterfaceMethodDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitEnumBodyDeclarations(JavaParser.EnumBodyDeclarationsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterClassBodyDeclaration(JavaParser.ClassBodyDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTypeList(JavaParser.TypeListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTypeArguments(JavaParser.TypeArgumentsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExpressionSwitch(JavaParser.ExpressionSwitchContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterEnumConstants(JavaParser.EnumConstantsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitGuardedPattern(JavaParser.GuardedPatternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitCompilationUnit(JavaParser.CompilationUnitContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitNonWildcardTypeArguments(JavaParser.NonWildcardTypeArgumentsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTypeArgumentsOrDiamond(JavaParser.TypeArgumentsOrDiamondContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAnnotationTypeElementRest(JavaParser.AnnotationTypeElementRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSquareBracketExpression(JavaParser.SquareBracketExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLambdaLVTIList(JavaParser.LambdaLVTIListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPrimaryExpression(JavaParser.PrimaryExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFormalParameterList(JavaParser.FormalParameterListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAnnotationMethodRest(JavaParser.AnnotationMethodRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitIntegerLiteral(JavaParser.IntegerLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterCompilationUnit(JavaParser.CompilationUnitContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAnnotationMethodOrConstantRest(JavaParser.AnnotationMethodOrConstantRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAnnotationConstantRest(JavaParser.AnnotationConstantRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterConstantDeclarator(JavaParser.ConstantDeclaratorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterElementValueArrayInitializer(JavaParser.ElementValueArrayInitializerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitRecordDeclaration(JavaParser.RecordDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTypeArgument(JavaParser.TypeArgumentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSwitchLabel(JavaParser.SwitchLabelContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterEveryRule(ParserRuleContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLambdaLVTIParameter(JavaParser.LambdaLVTIParameterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLambdaLVTIParameter(JavaParser.LambdaLVTIParameterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAnnotationTypeDeclaration(JavaParser.AnnotationTypeDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExpressionList(JavaParser.ExpressionListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitCompactConstructorDeclaration(JavaParser.CompactConstructorDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPostIncrementDecrementOperatorExpression(JavaParser.PostIncrementDecrementOperatorExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterRecordDeclaration(JavaParser.RecordDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitStatement(JavaParser.StatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFloatLiteral(JavaParser.FloatLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAnnotationTypeBody(JavaParser.AnnotationTypeBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPattern(JavaParser.PatternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTypeArgumentsOrDiamond(JavaParser.TypeArgumentsOrDiamondContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitModuleDeclaration(JavaParser.ModuleDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLambdaExpression(JavaParser.LambdaExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitVariableDeclarator(JavaParser.VariableDeclaratorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFinallyBlock(JavaParser.FinallyBlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterEnumBodyDeclarations(JavaParser.EnumBodyDeclarationsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterInterfaceMemberDeclaration(JavaParser.InterfaceMemberDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSuperSuffix(JavaParser.SuperSuffixContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitClassBodyDeclaration(JavaParser.ClassBodyDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterModuleDeclaration(JavaParser.ModuleDeclarationContext ctx)",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "JavaScriptLexerBase.java",
                "methods": [
                    {
                        "methodName": "boolean IsInTemplateString()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean IsStrictMode()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void setUseStrictDefault(boolean value)",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean IsStartOfFile()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean getStrictDefault()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void ProcessCloseBrace()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void ProcessOpenBrace()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void reset()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void ProcessStringLiteral()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Token nextToken()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void ProcessTemplateOpenBrace()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean IsRegexPossible()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void ProcessTemplateCloseBrace()",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "Python3LexerBase.java",
                "methods": [
                    {
                        "methodName": "void openBrace()",
                        "modifications": 1
                    },
                    {
                        "methodName": "CommonToken commonToken(int type, String text)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void emit(Token t)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void reset()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean atStartOfInput()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Token nextToken()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void closeBrace()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void onNewLine()",
                        "modifications": 1
                    },
                    {
                        "methodName": "int getIndentationCount(String spaces)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Token createDedent()",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "BaseChurn.java",
                "methods": [
                    {
                        "methodName": "void processFileChanges(Repository repository, RevCommit commit, String filePath, Map<String,Map<String,Integer>> churnMap, String lang)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void processJavaScriptFileChanges(Repository repository, RevCommit commit, String filePath, Map<String,Map<String,Integer>> churnMap, String lang)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String readFileFromCommit(Repository repository, RevCommit commit, String filePath)",
                        "modifications": 2
                    }
                ]
            },
            {
                "filePath": "JavaScriptParserListener.java",
                "methods": []
            },
            {
                "filePath": "CodeAnalysisConfig.java",
                "methods": [{
                    "methodName": "void setEnabled(boolean enabled)",
                    "modifications": 2
                }]
            },
            {
                "filePath": "CodeChurn.java",
                "methods": [
                    {
                        "methodName": "String getFileExtension(String filePath)",
                        "modifications": 3
                    },
                    {
                        "methodName": "void analyzeCommitDiff(Repository repository, RevCommit parent, RevCommit commit)",
                        "modifications": 3
                    },
                    {
                        "methodName": "void analyze(Repository repository)",
                        "modifications": 3
                    },
                    {
                        "methodName": "String retrieveFileName(String path)",
                        "modifications": 3
                    },
                    {
                        "methodName": "Map<String,Map<String,Integer>> returnResult()",
                        "modifications": 3
                    },
                    {
                        "methodName": "void getResultMap()",
                        "modifications": 3
                    },
                    {
                        "methodName": "AbstractTreeIterator prepareTreeParser(Repository repository, RevCommit commit)",
                        "modifications": 3
                    },
                    {
                        "methodName": "JSONObject returnJSONResult()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String toString()",
                        "modifications": 3
                    }
                ]
            },
            {
                "filePath": "MetricAnalyzerTest.java",
                "methods": [
                    {
                        "methodName": "void testGeneratedRulesetFile()",
                        "modifications": 3
                    },
                    {
                        "methodName": "String normalizeContent(String content)",
                        "modifications": 3
                    },
                    {
                        "methodName": "CodeAnalysisConfig loadConfig()",
                        "modifications": 3
                    },
                    {
                        "methodName": "void testPMDReportGeneration()",
                        "modifications": 3
                    },
                    {
                        "methodName": "void setUp()",
                        "modifications": 3
                    }
                ]
            },
            {
                "filePath": "GitMetricTest.java",
                "methods": [
                    {
                        "methodName": "void deleteDirectory(File directory)",
                        "modifications": 4
                    },
                    {
                        "methodName": "void testBranchCountWithAuthors()",
                        "modifications": 3
                    },
                    {
                        "methodName": "void testAllMetrics()",
                        "modifications": 2
                    },
                    {
                        "methodName": "void testCommitFixRevert()",
                        "modifications": 4
                    },
                    {
                        "methodName": "void testCommitSize()",
                        "modifications": 4
                    },
                    {
                        "methodName": "void cleanUp()",
                        "modifications": 4
                    },
                    {
                        "methodName": "Git getGit()",
                        "modifications": 4
                    },
                    {
                        "methodName": "void testCommitFrequency()",
                        "modifications": 4
                    },
                    {
                        "methodName": "void setUp()",
                        "modifications": 4
                    },
                    {
                        "methodName": "void testBranchTime()",
                        "modifications": 4
                    },
                    {
                        "methodName": "void analyze(Map<GitMetricEnum,CodeAnalysisConfig.MetricConfig> metrics)",
                        "modifications": 4
                    },
                    {
                        "methodName": "void testCodeOwnershipByFile()",
                        "modifications": 4
                    },
                    {
                        "methodName": "void testCodeChurn()",
                        "modifications": 4
                    }
                ]
            },
            {
                "filePath": "Python3ParserVisitor.java",
                "methods": []
            },
            {
                "filePath": "CodeOwnershipByFile.java",
                "methods": [
                    {
                        "methodName": "void analyzeCommitDiff(Repository repository, RevCommit commit, String author)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void analyze(Repository repository)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String findTopContributor(Map<String,Integer> authorChanges)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Map<String,Map<String,Integer>> returnResult()",
                        "modifications": 1
                    },
                    {
                        "methodName": "AbstractTreeIterator prepareTreeParser(Repository repository, RevCommit commit)",
                        "modifications": 1
                    },
                    {
                        "methodName": "JSONObject returnJSONResult()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String toString()",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "JavaScriptParserBase.java",
                "methods": [
                    {
                        "methodName": "boolean prev(String str)",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean closeBrace()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean p(String str)",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean next(String str)",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean notLineTerminator()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean lineTerminatorAhead()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean n(String str)",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean notOpenBraceAndNotFunction()",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "JavaLexer.java",
                "methods": [
                    {
                        "methodName": "String getGrammarFileName()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getModeNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String getSerializedATN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getRuleNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ATN getATN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Vocabulary getVocabulary()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] makeRuleNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] makeSymbolicNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getTokenNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] makeLiteralNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getChannelNames()",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "JavaParserBaseVisitor.java",
                "methods": [
                    {
                        "methodName": "T visitClassBody(JavaParser.ClassBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitInterfaceCommonBodyDeclaration(JavaParser.InterfaceCommonBodyDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPrimaryExpression(JavaParser.PrimaryExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAnnotationTypeDeclaration(JavaParser.AnnotationTypeDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTypeIdentifier(JavaParser.TypeIdentifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitRequiresModifier(JavaParser.RequiresModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitGenericMethodDeclaration(JavaParser.GenericMethodDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitInterfaceMethodModifier(JavaParser.InterfaceMethodModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitBlockStatement(JavaParser.BlockStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitInterfaceBodyDeclaration(JavaParser.InterfaceBodyDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLambdaExpression(JavaParser.LambdaExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitRecordComponentList(JavaParser.RecordComponentListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTypeParameters(JavaParser.TypeParametersContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitConstDeclaration(JavaParser.ConstDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExpressionList(JavaParser.ExpressionListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMemberReferenceExpression(JavaParser.MemberReferenceExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitEnumConstants(JavaParser.EnumConstantsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitGenericInterfaceMethodDeclaration(JavaParser.GenericInterfaceMethodDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFormalParameters(JavaParser.FormalParametersContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitModuleDeclaration(JavaParser.ModuleDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFormalParameter(JavaParser.FormalParameterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLocalVariableDeclaration(JavaParser.LocalVariableDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitArrayCreatorRest(JavaParser.ArrayCreatorRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMethodBody(JavaParser.MethodBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFinallyBlock(JavaParser.FinallyBlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTypeTypeOrVoid(JavaParser.TypeTypeOrVoidContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitBinaryOperatorExpression(JavaParser.BinaryOperatorExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitClassOrInterfaceModifier(JavaParser.ClassOrInterfaceModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTypeArgument(JavaParser.TypeArgumentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitBlock(JavaParser.BlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTypeArgumentsOrDiamond(JavaParser.TypeArgumentsOrDiamondContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitQualifiedName(JavaParser.QualifiedNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitClassDeclaration(JavaParser.ClassDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAnnotation(JavaParser.AnnotationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitForControl(JavaParser.ForControlContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAnnotationMethodRest(JavaParser.AnnotationMethodRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPrimary(JavaParser.PrimaryContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitNonWildcardTypeArgumentsOrDiamond(JavaParser.NonWildcardTypeArgumentsOrDiamondContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExplicitGenericInvocationSuffix(JavaParser.ExplicitGenericInvocationSuffixContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitGenericConstructorDeclaration(JavaParser.GenericConstructorDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitElementValuePairs(JavaParser.ElementValuePairsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSwitchRuleOutcome(JavaParser.SwitchRuleOutcomeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExplicitGenericInvocation(JavaParser.ExplicitGenericInvocationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitClassBodyDeclaration(JavaParser.ClassBodyDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitInterfaceBody(JavaParser.InterfaceBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSwitchBlockStatementGroup(JavaParser.SwitchBlockStatementGroupContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMemberDeclaration(JavaParser.MemberDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTypeParameter(JavaParser.TypeParameterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFormalParameterList(JavaParser.FormalParameterListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitArrayInitializer(JavaParser.ArrayInitializerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSwitchLabeledRule(JavaParser.SwitchLabeledRuleContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPackageDeclaration(JavaParser.PackageDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLastFormalParameter(JavaParser.LastFormalParameterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitEnumConstant(JavaParser.EnumConstantContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitVariableDeclaratorId(JavaParser.VariableDeclaratorIdContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPostIncrementDecrementOperatorExpression(JavaParser.PostIncrementDecrementOperatorExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitRecordBody(JavaParser.RecordBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitForInit(JavaParser.ForInitContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitNonWildcardTypeArguments(JavaParser.NonWildcardTypeArgumentsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAnnotationTypeElementRest(JavaParser.AnnotationTypeElementRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMethodDeclaration(JavaParser.MethodDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLiteral(JavaParser.LiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitCatchType(JavaParser.CatchTypeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitCompactConstructorDeclaration(JavaParser.CompactConstructorDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitClassCreatorRest(JavaParser.ClassCreatorRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitClassType(JavaParser.ClassTypeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitIdentifier(JavaParser.IdentifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitEnhancedForControl(JavaParser.EnhancedForControlContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTypeList(JavaParser.TypeListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitQualifiedNameList(JavaParser.QualifiedNameListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLocalTypeDeclaration(JavaParser.LocalTypeDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitConstructorDeclaration(JavaParser.ConstructorDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSquareBracketExpression(JavaParser.SquareBracketExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitCompilationUnit(JavaParser.CompilationUnitContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitDefaultValue(JavaParser.DefaultValueContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitEnumBodyDeclarations(JavaParser.EnumBodyDeclarationsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitModuleBody(JavaParser.ModuleBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitInnerCreator(JavaParser.InnerCreatorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitEnumDeclaration(JavaParser.EnumDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAnnotationTypeBody(JavaParser.AnnotationTypeBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitInstanceOfOperatorExpression(JavaParser.InstanceOfOperatorExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFieldDeclaration(JavaParser.FieldDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTypeType(JavaParser.TypeTypeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitResources(JavaParser.ResourcesContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitCreatedName(JavaParser.CreatedNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitParExpression(JavaParser.ParExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitConstantDeclarator(JavaParser.ConstantDeclaratorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitReceiverParameter(JavaParser.ReceiverParameterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAnnotationConstantRest(JavaParser.AnnotationConstantRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitModuleDirective(JavaParser.ModuleDirectiveContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitVariableDeclarators(JavaParser.VariableDeclaratorsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitElementValueArrayInitializer(JavaParser.ElementValueArrayInitializerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitInterfaceMethodDeclaration(JavaParser.InterfaceMethodDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitVariableDeclarator(JavaParser.VariableDeclaratorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSwitchExpression(JavaParser.SwitchExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSuperSuffix(JavaParser.SuperSuffixContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitInterfaceMemberDeclaration(JavaParser.InterfaceMemberDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTypeDeclaration(JavaParser.TypeDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMethodCall(JavaParser.MethodCallContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitResource(JavaParser.ResourceContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitGuardedPattern(JavaParser.GuardedPatternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitCreator(JavaParser.CreatorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitRecordComponent(JavaParser.RecordComponentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitRecordDeclaration(JavaParser.RecordDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLambdaLVTIParameter(JavaParser.LambdaLVTIParameterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTypeArguments(JavaParser.TypeArgumentsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMethodCallExpression(JavaParser.MethodCallExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMethodReferenceExpression(JavaParser.MethodReferenceExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLambdaBody(JavaParser.LambdaBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitStatement(JavaParser.StatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitCastExpression(JavaParser.CastExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitIntegerLiteral(JavaParser.IntegerLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitObjectCreationExpression(JavaParser.ObjectCreationExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExpressionLambda(JavaParser.ExpressionLambdaContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPattern(JavaParser.PatternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPrimitiveType(JavaParser.PrimitiveTypeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitUnaryOperatorExpression(JavaParser.UnaryOperatorExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitVariableModifier(JavaParser.VariableModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExpressionSwitch(JavaParser.ExpressionSwitchContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitResourceSpecification(JavaParser.ResourceSpecificationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLambdaLVTIList(JavaParser.LambdaLVTIListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitVariableInitializer(JavaParser.VariableInitializerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitArguments(JavaParser.ArgumentsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLambdaParameters(JavaParser.LambdaParametersContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitCatchClause(JavaParser.CatchClauseContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitClassOrInterfaceType(JavaParser.ClassOrInterfaceTypeContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAltAnnotationQualifiedName(JavaParser.AltAnnotationQualifiedNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAnnotationTypeElementDeclaration(JavaParser.AnnotationTypeElementDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImportDeclaration(JavaParser.ImportDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitRecordHeader(JavaParser.RecordHeaderContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFloatLiteral(JavaParser.FloatLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitElementValue(JavaParser.ElementValueContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitModifier(JavaParser.ModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTypeBound(JavaParser.TypeBoundContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTernaryExpression(JavaParser.TernaryExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitInterfaceDeclaration(JavaParser.InterfaceDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitElementValuePair(JavaParser.ElementValuePairContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAnnotationMethodOrConstantRest(JavaParser.AnnotationMethodOrConstantRestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSwitchLabel(JavaParser.SwitchLabelContext ctx)",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "Python3ParserBase.java",
                "methods": [
                    {
                        "methodName": "boolean CannotBePlusMinus()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean CannotBeDotLpEq()",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "Python3Parser.java",
                "methods": [
                    {
                        "methodName": "List<PatternContext> pattern()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Sequence_patternContext sequence_pattern()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode POWER(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode RIGHT_SHIFT()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Star_exprContext star_expr(int i)",
                        "modifications": 4
                    },
                    {
                        "methodName": "TerminalNode GREATER_THAN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Simple_stmtsContext simple_stmts()",
                        "modifications": 4
                    },
                    {
                        "methodName": "SubscriptlistContext subscriptlist()",
                        "modifications": 2
                    },
                    {
                        "methodName": "For_stmtContext for_stmt()",
                        "modifications": 3
                    },
                    {
                        "methodName": "VarargslistContext varargslist()",
                        "modifications": 3
                    },
                    {
                        "methodName": "Closed_patternContext closed_pattern(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode MATCH()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Class_patternContext class_pattern()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Double_star_patternContext double_star_pattern()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode NOT_EQ_1()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode WHILE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Case_blockContext case_block()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Import_as_namesContext import_as_names()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode AS()",
                        "modifications": 5
                    },
                    {
                        "methodName": "With_itemContext with_item(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<Testlist_star_exprContext> testlist_star_expr()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode CLASS()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode NOT()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode SEMI_COLON(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<Comp_opContext> comp_op()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode STAR()",
                        "modifications": 8
                    },
                    {
                        "methodName": "TerminalNode OR_OP(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Import_as_nameContext import_as_name(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TerminalNode> NOT_OP()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Key_value_patternContext key_value_pattern(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Maybe_star_patternContext maybe_star_pattern(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<Case_blockContext> case_block()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode IDIV()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<Maybe_star_patternContext> maybe_star_pattern()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode PASS()",
                        "modifications": 1
                    },
                    {
                        "methodName": "T accept(ParseTreeVisitor<?extendsT> visitor)",
                        "modifications": 119
                    },
                    {
                        "methodName": "If_stmtContext if_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "String[] makeSymbolicNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Or_testContext or_test()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode NONE()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode EOF()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Open_sequence_patternContext open_sequence_pattern()",
                        "modifications": 3
                    },
                    {
                        "methodName": "StringsContext strings()",
                        "modifications": 3
                    },
                    {
                        "methodName": "Match_stmtContext match_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "boolean literal_pattern_sempred(Literal_patternContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Dotted_nameContext dotted_name()",
                        "modifications": 4
                    },
                    {
                        "methodName": "And_testContext and_test()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Comp_forContext comp_for()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode LEFT_SHIFT()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TrailerContext trailer(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "ArgumentContext argument(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Import_as_nameContext import_as_name()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Yield_argContext yield_arg()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode AT()",
                        "modifications": 2
                    },
                    {
                        "methodName": "String[] makeLiteralNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Not_testContext not_test(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode CONTINUE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean value_pattern_sempred(Value_patternContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Single_inputContext single_input()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Dotted_as_nameContext dotted_as_name()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Import_fromContext import_from()",
                        "modifications": 2
                    },
                    {
                        "methodName": "SliceopContext sliceop()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode ASSIGN(int i)",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode LAMBDA()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode TRY()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode YIELD()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<BlockContext> block()",
                        "modifications": 4
                    },
                    {
                        "methodName": "Case_blockContext case_block(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Except_clauseContext except_clause(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String getGrammarFileName()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<Closed_patternContext> closed_pattern()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode MINUS()",
                        "modifications": 3
                    },
                    {
                        "methodName": "String getSerializedATN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Flow_stmtContext flow_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<Key_value_patternContext> key_value_pattern()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Yield_exprContext yield_expr(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "int getRuleIndex()",
                        "modifications": 119
                    },
                    {
                        "methodName": "DictorsetmakerContext dictorsetmaker()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Comp_iterContext comp_iter()",
                        "modifications": 3
                    },
                    {
                        "methodName": "List<ExprContext> expr()",
                        "modifications": 4
                    },
                    {
                        "methodName": "Simple_stmtContext simple_stmt(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode RIGHT_SHIFT_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Real_numberContext real_number()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Signed_numberContext signed_number()",
                        "modifications": 3
                    },
                    {
                        "methodName": "Vocabulary getVocabulary()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode NONLOCAL()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<Or_testContext> or_test()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode AWAIT()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode NEWLINE(int i)",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<TerminalNode> DOT()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode DOT()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ExprlistContext exprlist()",
                        "modifications": 4
                    },
                    {
                        "methodName": "TerminalNode COLON(int i)",
                        "modifications": 5
                    },
                    {
                        "methodName": "List<TerminalNode> NEWLINE()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode NAME()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode MOD()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode ADD(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getTokenNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode ELIF(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Import_stmtContext import_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode ASYNC()",
                        "modifications": 3
                    },
                    {
                        "methodName": "Yield_stmtContext yield_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Keyword_patternContext keyword_pattern(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Global_stmtContext global_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<Except_clauseContext> except_clause()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Yield_exprContext yield_expr()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode ELLIPSIS(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Testlist_star_exprContext testlist_star_expr(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode POWER_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode FALSE()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode FINALLY()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Capture_patternContext capture_pattern()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<DecoratorContext> decorator()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode MULT_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] makeRuleNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Assert_stmtContext assert_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Keyword_patternContext keyword_pattern()",
                        "modifications": 1
                    },
                    {
                        "methodName": "PatternContext pattern(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Async_funcdefContext async_funcdef()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Eval_inputContext eval_input()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Star_named_expressionsContext star_named_expressions()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode NOT_EQ_2()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Continue_stmtContext continue_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "StmtContext stmt(int i)",
                        "modifications": 2
                    },
                    {
                        "methodName": "Comp_opContext comp_op(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TerminalNode> MINUS()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Items_patternContext items_pattern()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode BREAK()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<Simple_stmtContext> simple_stmt()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode IDIV_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<Star_named_expressionContext> star_named_expression()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Literal_exprContext literal_expr()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode DIV_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode GT_EQ()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Test_nocondContext test_nocond()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode AND_OP()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TypedargslistContext typedargslist()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode DEL()",
                        "modifications": 1
                    },
                    {
                        "methodName": "FuncdefContext funcdef()",
                        "modifications": 5
                    },
                    {
                        "methodName": "Comp_ifContext comp_if()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode INDENT()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ComparisonContext comparison()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode MOD_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode OPEN_BRACK()",
                        "modifications": 3
                    },
                    {
                        "methodName": "Encoding_declContext encoding_decl()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Simple_stmtContext simple_stmt()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TfpdefContext tfpdef()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Positional_patternsContext positional_patterns()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<TerminalNode> ELLIPSIS()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Raise_stmtContext raise_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode IS()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ATN getATN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TerminalNode> ADD()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Group_patternContext group_pattern()",
                        "modifications": 2
                    },
                    {
                        "methodName": "void exitRule(ParseTreeListener listener)",
                        "modifications": 119
                    },
                    {
                        "methodName": "Name_or_attrContext name_or_attr()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode MINUS(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "AnnassignContext annassign()",
                        "modifications": 2
                    },
                    {
                        "methodName": "AtomContext atom()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode ELLIPSIS()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Maybe_star_patternContext maybe_star_pattern()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<Subscript_Context> subscript_()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode EQUALS()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Key_value_patternContext key_value_pattern()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<Yield_exprContext> yield_expr()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Return_stmtContext return_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<With_itemContext> with_item()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode ADD()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode AND_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "NameContext name(int i)",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode LEFT_SHIFT_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "GuardContext guard()",
                        "modifications": 2
                    },
                    {
                        "methodName": "PatternsContext patterns()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TestlistContext testlist()",
                        "modifications": 6
                    },
                    {
                        "methodName": "Testlist_compContext testlist_comp()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode NOT_OP(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode CLOSE_BRACK()",
                        "modifications": 3
                    },
                    {
                        "methodName": "AttrContext attr()",
                        "modifications": 4
                    },
                    {
                        "methodName": "StmtContext stmt()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode ASSIGN()",
                        "modifications": 3
                    },
                    {
                        "methodName": "List<TerminalNode> ELIF()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode NUMBER()",
                        "modifications": 4
                    },
                    {
                        "methodName": "Not_testContext not_test()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Or_patternContext or_pattern()",
                        "modifications": 3
                    },
                    {
                        "methodName": "VfpdefContext vfpdef()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Try_stmtContext try_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Complex_numberContext complex_number()",
                        "modifications": 3
                    },
                    {
                        "methodName": "List<TrailerContext> trailer()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TerminalNode> COMMA()",
                        "modifications": 21
                    },
                    {
                        "methodName": "List<TfpdefContext> tfpdef()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode LESS_THAN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Async_stmtContext async_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode GLOBAL()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TerminalNode> SEMI_COLON()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode XOR_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "BlockContext block(int i)",
                        "modifications": 4
                    },
                    {
                        "methodName": "Star_named_expressionContext star_named_expression(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode TRUE()",
                        "modifications": 3
                    },
                    {
                        "methodName": "boolean literal_expr_sempred(Literal_exprContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode FOR()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Expr_stmtContext expr_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "String[] getRuleNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "File_inputContext file_input()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Star_exprContext star_expr()",
                        "modifications": 1
                    },
                    {
                        "methodName": "While_stmtContext while_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode XOR()",
                        "modifications": 1
                    },
                    {
                        "methodName": "VfpdefContext vfpdef(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<And_testContext> and_test()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Mapping_patternContext mapping_pattern()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode DEF()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode DOT(int i)",
                        "modifications": 3
                    },
                    {
                        "methodName": "boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TerminalNode> ASSIGN()",
                        "modifications": 3
                    },
                    {
                        "methodName": "List<TerminalNode> OR_OP()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode CLOSE_PAREN()",
                        "modifications": 9
                    },
                    {
                        "methodName": "ArglistContext arglist()",
                        "modifications": 4
                    },
                    {
                        "methodName": "Wildcard_patternContext wildcard_pattern()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode RETURN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TerminalNode> COLON()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode COMMA(int i)",
                        "modifications": 21
                    },
                    {
                        "methodName": "TerminalNode OPEN_BRACE()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Lambdef_nocondContext lambdef_nocond()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Del_stmtContext del_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode WITH()",
                        "modifications": 1
                    },
                    {
                        "methodName": "DecoratorContext decorator(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Import_nameContext import_name()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode ARROW()",
                        "modifications": 1
                    },
                    {
                        "methodName": "DecoratorContext decorator()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TerminalNode> AND()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ClassdefContext classdef()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode SUB_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode ADD_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "NameContext name()",
                        "modifications": 13
                    },
                    {
                        "methodName": "TfpdefContext tfpdef(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Compound_stmtContext compound_stmt()",
                        "modifications": 3
                    },
                    {
                        "methodName": "List<StmtContext> stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<Import_as_nameContext> import_as_name()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Pass_stmtContext pass_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Literal_patternContext literal_pattern()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Maybe_sequence_patternContext maybe_sequence_pattern()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode COMMA()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode POWER()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode ELSE()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode COLON()",
                        "modifications": 12
                    },
                    {
                        "methodName": "TerminalNode RAISE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode DEDENT()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode LT_EQ()",
                        "modifications": 1
                    },
                    {
                        "methodName": "As_patternContext as_pattern()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ArgumentContext argument()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode OR_OP()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Closed_patternContext closed_pattern()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode ASSERT()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Testlist_star_exprContext testlist_star_expr()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ExprContext expr(int i)",
                        "modifications": 4
                    },
                    {
                        "methodName": "ParametersContext parameters()",
                        "modifications": 2
                    },
                    {
                        "methodName": "void enterRule(ParseTreeListener listener)",
                        "modifications": 119
                    },
                    {
                        "methodName": "And_testContext and_test(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TerminalNode> OR()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Or_testContext or_test(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode CLOSE_BRACE()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<Keyword_patternContext> keyword_pattern()",
                        "modifications": 1
                    },
                    {
                        "methodName": "With_stmtContext with_stmt()",
                        "modifications": 3
                    },
                    {
                        "methodName": "boolean pattern_capture_target_sempred(Pattern_capture_targetContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Subscript_Context subscript_(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<NameContext> name()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode NEWLINE()",
                        "modifications": 5
                    },
                    {
                        "methodName": "List<Not_testContext> not_test()",
                        "modifications": 1
                    },
                    {
                        "methodName": "DecoratedContext decorated()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<TestContext> test()",
                        "modifications": 12
                    },
                    {
                        "methodName": "TerminalNode IN()",
                        "modifications": 3
                    },
                    {
                        "methodName": "LambdefContext lambdef()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Comp_opContext comp_op()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode STRING(int i)",
                        "modifications": 2
                    },
                    {
                        "methodName": "Keyword_patternsContext keyword_patterns()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<TerminalNode> STRING()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TestContext test()",
                        "modifications": 13
                    },
                    {
                        "methodName": "TerminalNode AT_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Nonlocal_stmtContext nonlocal_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Imaginary_numberContext imaginary_number()",
                        "modifications": 2
                    },
                    {
                        "methodName": "DecoratorsContext decorators()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Signed_real_numberContext signed_real_number()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode IF()",
                        "modifications": 4
                    },
                    {
                        "methodName": "boolean expr_sempred(ExprContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Pattern_capture_targetContext pattern_capture_target()",
                        "modifications": 5
                    },
                    {
                        "methodName": "List<Star_exprContext> star_expr()",
                        "modifications": 4
                    },
                    {
                        "methodName": "Dotted_as_nameContext dotted_as_name(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Subscript_Context subscript_()",
                        "modifications": 1
                    },
                    {
                        "methodName": "AugassignContext augassign()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode OR_ASSIGN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode IMPORT()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode FROM()",
                        "modifications": 3
                    },
                    {
                        "methodName": "List<Dotted_as_nameContext> dotted_as_name()",
                        "modifications": 1
                    },
                    {
                        "methodName": "With_itemContext with_item()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode CASE()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TerminalNode> POWER()",
                        "modifications": 1
                    },
                    {
                        "methodName": "BlockContext block()",
                        "modifications": 5
                    },
                    {
                        "methodName": "List<ArgumentContext> argument()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Star_patternContext star_pattern()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Break_stmtContext break_stmt()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Subject_exprContext subject_expr()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ExprContext expr(int _p)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Value_patternContext value_pattern()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<VfpdefContext> vfpdef()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TestContext test(int i)",
                        "modifications": 12
                    },
                    {
                        "methodName": "ExprContext expr()",
                        "modifications": 4
                    },
                    {
                        "methodName": "TerminalNode OR(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Except_clauseContext except_clause()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode OPEN_PAREN()",
                        "modifications": 9
                    },
                    {
                        "methodName": "Dotted_as_namesContext dotted_as_names()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Star_named_expressionContext star_named_expression()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode UNDERSCORE()",
                        "modifications": 2
                    },
                    {
                        "methodName": "PatternContext pattern()",
                        "modifications": 6
                    },
                    {
                        "methodName": "TerminalNode DIV()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Atom_exprContext atom_expr()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode AND(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TrailerContext trailer()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode EXCEPT()",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "JavaParserListener.java",
                "methods": []
            },
            {
                "filePath": "Python3ParserBaseListener.java",
                "methods": [
                    {
                        "methodName": "void exitClass_pattern(Python3Parser.Class_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAnnassign(Python3Parser.AnnassignContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSigned_number(Python3Parser.Signed_numberContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterKey_value_pattern(Python3Parser.Key_value_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitRaise_stmt(Python3Parser.Raise_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterYield_expr(Python3Parser.Yield_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitWith_item(Python3Parser.With_itemContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterEncoding_decl(Python3Parser.Encoding_declContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitStar_named_expression(Python3Parser.Star_named_expressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitBlock(Python3Parser.BlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitStar_pattern(Python3Parser.Star_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExpr_stmt(Python3Parser.Expr_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitComparison(Python3Parser.ComparisonContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExpr(Python3Parser.ExprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTypedargslist(Python3Parser.TypedargslistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSigned_real_number(Python3Parser.Signed_real_numberContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitKeyword_patterns(Python3Parser.Keyword_patternsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterDouble_star_pattern(Python3Parser.Double_star_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitVarargslist(Python3Parser.VarargslistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterComp_for(Python3Parser.Comp_forContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFuncdef(Python3Parser.FuncdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImaginary_number(Python3Parser.Imaginary_numberContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitContinue_stmt(Python3Parser.Continue_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAnd_test(Python3Parser.And_testContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTestlist_comp(Python3Parser.Testlist_compContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitWith_stmt(Python3Parser.With_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterVarargslist(Python3Parser.VarargslistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterDotted_name(Python3Parser.Dotted_nameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitBreak_stmt(Python3Parser.Break_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitDel_stmt(Python3Parser.Del_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPass_stmt(Python3Parser.Pass_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFlow_stmt(Python3Parser.Flow_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImport_as_name(Python3Parser.Import_as_nameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterCapture_pattern(Python3Parser.Capture_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterDictorsetmaker(Python3Parser.DictorsetmakerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterName_or_attr(Python3Parser.Name_or_attrContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLambdef_nocond(Python3Parser.Lambdef_nocondContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLiteral_expr(Python3Parser.Literal_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitDotted_name(Python3Parser.Dotted_nameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterNot_test(Python3Parser.Not_testContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSubscriptlist(Python3Parser.SubscriptlistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterCompound_stmt(Python3Parser.Compound_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLambdef(Python3Parser.LambdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitYield_expr(Python3Parser.Yield_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterRaise_stmt(Python3Parser.Raise_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterKeyword_patterns(Python3Parser.Keyword_patternsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAtom(Python3Parser.AtomContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterBreak_stmt(Python3Parser.Break_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitDouble_star_pattern(Python3Parser.Double_star_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitDecorated(Python3Parser.DecoratedContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPatterns(Python3Parser.PatternsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTestlist_star_expr(Python3Parser.Testlist_star_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitGuard(Python3Parser.GuardContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterValue_pattern(Python3Parser.Value_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAttr(Python3Parser.AttrContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitClassdef(Python3Parser.ClassdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLiteral_pattern(Python3Parser.Literal_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSubscript_(Python3Parser.Subscript_Context ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExprlist(Python3Parser.ExprlistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTest_nocond(Python3Parser.Test_nocondContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTrailer(Python3Parser.TrailerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSequence_pattern(Python3Parser.Sequence_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPattern(Python3Parser.PatternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitYield_stmt(Python3Parser.Yield_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterOr_pattern(Python3Parser.Or_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSliceop(Python3Parser.SliceopContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterStar_expr(Python3Parser.Star_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitEval_input(Python3Parser.Eval_inputContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterStar_named_expression(Python3Parser.Star_named_expressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMaybe_star_pattern(Python3Parser.Maybe_star_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSigned_real_number(Python3Parser.Signed_real_numberContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImport_as_name(Python3Parser.Import_as_nameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExpr(Python3Parser.ExprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterStar_named_expressions(Python3Parser.Star_named_expressionsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPositional_patterns(Python3Parser.Positional_patternsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTfpdef(Python3Parser.TfpdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterIf_stmt(Python3Parser.If_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterClassdef(Python3Parser.ClassdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitDecorator(Python3Parser.DecoratorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMaybe_sequence_pattern(Python3Parser.Maybe_sequence_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImport_as_names(Python3Parser.Import_as_namesContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImport_from(Python3Parser.Import_fromContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterOpen_sequence_pattern(Python3Parser.Open_sequence_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterStrings(Python3Parser.StringsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterComp_iter(Python3Parser.Comp_iterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterParameters(Python3Parser.ParametersContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterComp_op(Python3Parser.Comp_opContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitNonlocal_stmt(Python3Parser.Nonlocal_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitClosed_pattern(Python3Parser.Closed_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAsync_funcdef(Python3Parser.Async_funcdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTest_nocond(Python3Parser.Test_nocondContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterYield_arg(Python3Parser.Yield_argContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitIf_stmt(Python3Parser.If_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTestlist_comp(Python3Parser.Testlist_compContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExcept_clause(Python3Parser.Except_clauseContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMapping_pattern(Python3Parser.Mapping_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitDecorators(Python3Parser.DecoratorsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAs_pattern(Python3Parser.As_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImaginary_number(Python3Parser.Imaginary_numberContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterCase_block(Python3Parser.Case_blockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAtom_expr(Python3Parser.Atom_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPositional_patterns(Python3Parser.Positional_patternsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAugassign(Python3Parser.AugassignContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitDotted_as_names(Python3Parser.Dotted_as_namesContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAsync_stmt(Python3Parser.Async_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitDictorsetmaker(Python3Parser.DictorsetmakerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterBlock(Python3Parser.BlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitArglist(Python3Parser.ArglistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImport_from(Python3Parser.Import_fromContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterComparison(Python3Parser.ComparisonContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitWhile_stmt(Python3Parser.While_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSimple_stmt(Python3Parser.Simple_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMatch_stmt(Python3Parser.Match_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLiteral_expr(Python3Parser.Literal_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitComplex_number(Python3Parser.Complex_numberContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitOr_test(Python3Parser.Or_testContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLiteral_pattern(Python3Parser.Literal_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitName_or_attr(Python3Parser.Name_or_attrContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAnnassign(Python3Parser.AnnassignContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSigned_number(Python3Parser.Signed_numberContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExcept_clause(Python3Parser.Except_clauseContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitReal_number(Python3Parser.Real_numberContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterClass_pattern(Python3Parser.Class_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitComp_for(Python3Parser.Comp_forContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterContinue_stmt(Python3Parser.Continue_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterWildcard_pattern(Python3Parser.Wildcard_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitKeyword_pattern(Python3Parser.Keyword_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void visitErrorNode(ErrorNode node)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterOr_test(Python3Parser.Or_testContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitWildcard_pattern(Python3Parser.Wildcard_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitNot_test(Python3Parser.Not_testContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitDotted_as_name(Python3Parser.Dotted_as_nameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExpr_stmt(Python3Parser.Expr_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitStrings(Python3Parser.StringsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPattern_capture_target(Python3Parser.Pattern_capture_targetContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTypedargslist(Python3Parser.TypedargslistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSingle_input(Python3Parser.Single_inputContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMatch_stmt(Python3Parser.Match_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFile_input(Python3Parser.File_inputContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterDecorated(Python3Parser.DecoratedContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterDotted_as_name(Python3Parser.Dotted_as_nameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterDotted_as_names(Python3Parser.Dotted_as_namesContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterReal_number(Python3Parser.Real_numberContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterDecorator(Python3Parser.DecoratorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFile_input(Python3Parser.File_inputContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterReturn_stmt(Python3Parser.Return_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterGuard(Python3Parser.GuardContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitEveryRule(ParserRuleContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitKey_value_pattern(Python3Parser.Key_value_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterArglist(Python3Parser.ArglistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitComp_op(Python3Parser.Comp_opContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAtom(Python3Parser.AtomContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitValue_pattern(Python3Parser.Value_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAssert_stmt(Python3Parser.Assert_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterDel_stmt(Python3Parser.Del_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitVfpdef(Python3Parser.VfpdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMapping_pattern(Python3Parser.Mapping_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitStar_named_expressions(Python3Parser.Star_named_expressionsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTest(Python3Parser.TestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitCapture_pattern(Python3Parser.Capture_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAttr(Python3Parser.AttrContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMaybe_star_pattern(Python3Parser.Maybe_star_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTestlist_star_expr(Python3Parser.Testlist_star_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitOpen_sequence_pattern(Python3Parser.Open_sequence_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitCompound_stmt(Python3Parser.Compound_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitItems_pattern(Python3Parser.Items_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterWith_item(Python3Parser.With_itemContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void visitTerminal(TerminalNode node)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterClosed_pattern(Python3Parser.Closed_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAssert_stmt(Python3Parser.Assert_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterGroup_pattern(Python3Parser.Group_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterWith_stmt(Python3Parser.With_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTfpdef(Python3Parser.TfpdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitGroup_pattern(Python3Parser.Group_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitStmt(Python3Parser.StmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTrailer(Python3Parser.TrailerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSliceop(Python3Parser.SliceopContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitArgument(Python3Parser.ArgumentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAs_pattern(Python3Parser.As_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterGlobal_stmt(Python3Parser.Global_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterYield_stmt(Python3Parser.Yield_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterComp_if(Python3Parser.Comp_ifContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFor_stmt(Python3Parser.For_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSequence_pattern(Python3Parser.Sequence_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterItems_pattern(Python3Parser.Items_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitReturn_stmt(Python3Parser.Return_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAsync_stmt(Python3Parser.Async_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExprlist(Python3Parser.ExprlistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAtom_expr(Python3Parser.Atom_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPatterns(Python3Parser.PatternsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTestlist(Python3Parser.TestlistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSimple_stmts(Python3Parser.Simple_stmtsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterArgument(Python3Parser.ArgumentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPattern(Python3Parser.PatternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSubscriptlist(Python3Parser.SubscriptlistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPattern_capture_target(Python3Parser.Pattern_capture_targetContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSubscript_(Python3Parser.Subscript_Context ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTest(Python3Parser.TestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitComp_if(Python3Parser.Comp_ifContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSimple_stmts(Python3Parser.Simple_stmtsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFuncdef(Python3Parser.FuncdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLambdef(Python3Parser.LambdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitComp_iter(Python3Parser.Comp_iterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTry_stmt(Python3Parser.Try_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImport_name(Python3Parser.Import_nameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterName(Python3Parser.NameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitYield_arg(Python3Parser.Yield_argContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterEval_input(Python3Parser.Eval_inputContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitCase_block(Python3Parser.Case_blockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLambdef_nocond(Python3Parser.Lambdef_nocondContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAnd_test(Python3Parser.And_testContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterDecorators(Python3Parser.DecoratorsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitGlobal_stmt(Python3Parser.Global_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPass_stmt(Python3Parser.Pass_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSingle_input(Python3Parser.Single_inputContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAugassign(Python3Parser.AugassignContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFlow_stmt(Python3Parser.Flow_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTestlist(Python3Parser.TestlistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterWhile_stmt(Python3Parser.While_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTry_stmt(Python3Parser.Try_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImport_stmt(Python3Parser.Import_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImport_as_names(Python3Parser.Import_as_namesContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSubject_expr(Python3Parser.Subject_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAsync_funcdef(Python3Parser.Async_funcdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImport_name(Python3Parser.Import_nameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFor_stmt(Python3Parser.For_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitEncoding_decl(Python3Parser.Encoding_declContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterNonlocal_stmt(Python3Parser.Nonlocal_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitParameters(Python3Parser.ParametersContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterKeyword_pattern(Python3Parser.Keyword_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterEveryRule(ParserRuleContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSubject_expr(Python3Parser.Subject_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitStar_expr(Python3Parser.Star_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMaybe_sequence_pattern(Python3Parser.Maybe_sequence_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterVfpdef(Python3Parser.VfpdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterComplex_number(Python3Parser.Complex_numberContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterStmt(Python3Parser.StmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSimple_stmt(Python3Parser.Simple_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitName(Python3Parser.NameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitOr_pattern(Python3Parser.Or_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterStar_pattern(Python3Parser.Star_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImport_stmt(Python3Parser.Import_stmtContext ctx)",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "Python3ParserBaseVisitor.java",
                "methods": [
                    {
                        "methodName": "T visitFor_stmt(Python3Parser.For_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitGlobal_stmt(Python3Parser.Global_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitArgument(Python3Parser.ArgumentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitParameters(Python3Parser.ParametersContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitStrings(Python3Parser.StringsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLiteral_pattern(Python3Parser.Literal_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLambdef(Python3Parser.LambdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTfpdef(Python3Parser.TfpdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSigned_real_number(Python3Parser.Signed_real_numberContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExprlist(Python3Parser.ExprlistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAttr(Python3Parser.AttrContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAssert_stmt(Python3Parser.Assert_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitCompound_stmt(Python3Parser.Compound_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLambdef_nocond(Python3Parser.Lambdef_nocondContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMaybe_star_pattern(Python3Parser.Maybe_star_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExcept_clause(Python3Parser.Except_clauseContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitStar_named_expressions(Python3Parser.Star_named_expressionsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitComplex_number(Python3Parser.Complex_numberContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMatch_stmt(Python3Parser.Match_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPatterns(Python3Parser.PatternsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitOr_test(Python3Parser.Or_testContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitOpen_sequence_pattern(Python3Parser.Open_sequence_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitWhile_stmt(Python3Parser.While_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImport_stmt(Python3Parser.Import_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitName(Python3Parser.NameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAsync_funcdef(Python3Parser.Async_funcdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPattern_capture_target(Python3Parser.Pattern_capture_targetContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPass_stmt(Python3Parser.Pass_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitDictorsetmaker(Python3Parser.DictorsetmakerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAsync_stmt(Python3Parser.Async_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAtom(Python3Parser.AtomContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFlow_stmt(Python3Parser.Flow_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitWildcard_pattern(Python3Parser.Wildcard_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTry_stmt(Python3Parser.Try_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitGroup_pattern(Python3Parser.Group_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitWith_stmt(Python3Parser.With_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAnd_test(Python3Parser.And_testContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitReal_number(Python3Parser.Real_numberContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSequence_pattern(Python3Parser.Sequence_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTest_nocond(Python3Parser.Test_nocondContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSliceop(Python3Parser.SliceopContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPositional_patterns(Python3Parser.Positional_patternsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitEncoding_decl(Python3Parser.Encoding_declContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitDotted_name(Python3Parser.Dotted_nameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitYield_expr(Python3Parser.Yield_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitDecorator(Python3Parser.DecoratorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMaybe_sequence_pattern(Python3Parser.Maybe_sequence_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitGuard(Python3Parser.GuardContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitKeyword_pattern(Python3Parser.Keyword_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitDotted_as_name(Python3Parser.Dotted_as_nameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExpr(Python3Parser.ExprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitBreak_stmt(Python3Parser.Break_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTest(Python3Parser.TestContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitWith_item(Python3Parser.With_itemContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLiteral_expr(Python3Parser.Literal_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImaginary_number(Python3Parser.Imaginary_numberContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTestlist(Python3Parser.TestlistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTypedargslist(Python3Parser.TypedargslistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitRaise_stmt(Python3Parser.Raise_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitName_or_attr(Python3Parser.Name_or_attrContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitContinue_stmt(Python3Parser.Continue_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitEval_input(Python3Parser.Eval_inputContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitStar_named_expression(Python3Parser.Star_named_expressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSimple_stmt(Python3Parser.Simple_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitIf_stmt(Python3Parser.If_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitDecorators(Python3Parser.DecoratorsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitNot_test(Python3Parser.Not_testContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitArglist(Python3Parser.ArglistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSubject_expr(Python3Parser.Subject_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitDouble_star_pattern(Python3Parser.Double_star_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSingle_input(Python3Parser.Single_inputContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitDecorated(Python3Parser.DecoratedContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImport_as_name(Python3Parser.Import_as_nameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitClosed_pattern(Python3Parser.Closed_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitValue_pattern(Python3Parser.Value_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitVfpdef(Python3Parser.VfpdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFile_input(Python3Parser.File_inputContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSubscript_(Python3Parser.Subscript_Context ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitCapture_pattern(Python3Parser.Capture_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPattern(Python3Parser.PatternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImport_name(Python3Parser.Import_nameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitReturn_stmt(Python3Parser.Return_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitNonlocal_stmt(Python3Parser.Nonlocal_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitOr_pattern(Python3Parser.Or_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTrailer(Python3Parser.TrailerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFuncdef(Python3Parser.FuncdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitItems_pattern(Python3Parser.Items_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitYield_stmt(Python3Parser.Yield_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSigned_number(Python3Parser.Signed_numberContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitClass_pattern(Python3Parser.Class_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAs_pattern(Python3Parser.As_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImport_as_names(Python3Parser.Import_as_namesContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitComp_if(Python3Parser.Comp_ifContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitStmt(Python3Parser.StmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitComp_iter(Python3Parser.Comp_iterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAtom_expr(Python3Parser.Atom_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSimple_stmts(Python3Parser.Simple_stmtsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImport_from(Python3Parser.Import_fromContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitDel_stmt(Python3Parser.Del_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitStar_pattern(Python3Parser.Star_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTestlist_star_expr(Python3Parser.Testlist_star_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAugassign(Python3Parser.AugassignContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitDotted_as_names(Python3Parser.Dotted_as_namesContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitVarargslist(Python3Parser.VarargslistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitCase_block(Python3Parser.Case_blockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitStar_expr(Python3Parser.Star_exprContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSubscriptlist(Python3Parser.SubscriptlistContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitBlock(Python3Parser.BlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitComparison(Python3Parser.ComparisonContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTestlist_comp(Python3Parser.Testlist_compContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitClassdef(Python3Parser.ClassdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMapping_pattern(Python3Parser.Mapping_patternContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAnnassign(Python3Parser.AnnassignContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitYield_arg(Python3Parser.Yield_argContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitComp_op(Python3Parser.Comp_opContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitComp_for(Python3Parser.Comp_forContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExpr_stmt(Python3Parser.Expr_stmtContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitKeyword_patterns(Python3Parser.Keyword_patternsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitKey_value_pattern(Python3Parser.Key_value_patternContext ctx)",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "JavaScriptParserBaseListener.java",
                "methods": [
                    {
                        "methodName": "void enterObjectLiteralExpression(JavaScriptParser.ObjectLiteralExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitBlock(JavaScriptParser.BlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterStatement(JavaScriptParser.StatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTemplateStringLiteral(JavaScriptParser.TemplateStringLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitBitShiftExpression(JavaScriptParser.BitShiftExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitDefaultClause(JavaScriptParser.DefaultClauseContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPostIncrementExpression(JavaScriptParser.PostIncrementExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterDefaultClause(JavaScriptParser.DefaultClauseContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImportDefault(JavaScriptParser.ImportDefaultContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitNotExpression(JavaScriptParser.NotExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTypeofExpression(JavaScriptParser.TypeofExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImportDefault(JavaScriptParser.ImportDefaultContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterVariableDeclarationList(JavaScriptParser.VariableDeclarationListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterModuleExportName(JavaScriptParser.ModuleExportNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterNotExpression(JavaScriptParser.NotExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitIdentifier(JavaScriptParser.IdentifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAssignmentOperator(JavaScriptParser.AssignmentOperatorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSourceElement(JavaScriptParser.SourceElementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitThrowStatement(JavaScriptParser.ThrowStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPropertyShorthand(JavaScriptParser.PropertyShorthandContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitCaseClauses(JavaScriptParser.CaseClausesContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFormalParameterList(JavaScriptParser.FormalParameterListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitVariableDeclaration(JavaScriptParser.VariableDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitContinueStatement(JavaScriptParser.ContinueStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitVariableDeclarationList(JavaScriptParser.VariableDeclarationListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterCaseBlock(JavaScriptParser.CaseBlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitArgument(JavaScriptParser.ArgumentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImportFrom(JavaScriptParser.ImportFromContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterClassExpression(JavaScriptParser.ClassExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitBreakStatement(JavaScriptParser.BreakStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterArrowFunctionParameters(JavaScriptParser.ArrowFunctionParametersContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMethodDefinition(JavaScriptParser.MethodDefinitionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImportFromBlock(JavaScriptParser.ImportFromBlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAssignmentOperatorExpression(JavaScriptParser.AssignmentOperatorExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterIdentifierName(JavaScriptParser.IdentifierNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterClassElement(JavaScriptParser.ClassElementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitUnaryMinusExpression(JavaScriptParser.UnaryMinusExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLogicalOrExpression(JavaScriptParser.LogicalOrExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFinallyProduction(JavaScriptParser.FinallyProductionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitCatchProduction(JavaScriptParser.CatchProductionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitBitNotExpression(JavaScriptParser.BitNotExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitBitAndExpression(JavaScriptParser.BitAndExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitYieldStatement(JavaScriptParser.YieldStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExportAliasName(JavaScriptParser.ExportAliasNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPropertyGetter(JavaScriptParser.PropertyGetterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitArrowFunctionParameters(JavaScriptParser.ArrowFunctionParametersContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitWhileStatement(JavaScriptParser.WhileStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExportAliasName(JavaScriptParser.ExportAliasNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterCaseClauses(JavaScriptParser.CaseClausesContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterArguments(JavaScriptParser.ArgumentsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitObjectLiteralExpression(JavaScriptParser.ObjectLiteralExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMemberDotExpression(JavaScriptParser.MemberDotExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFunctionExpression(JavaScriptParser.FunctionExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAssignable(JavaScriptParser.AssignableContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterVariableDeclaration(JavaScriptParser.VariableDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPostIncrementExpression(JavaScriptParser.PostIncrementExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExpressionSequence(JavaScriptParser.ExpressionSequenceContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPropertyName(JavaScriptParser.PropertyNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitClassDeclaration(JavaScriptParser.ClassDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitClassElementName(JavaScriptParser.ClassElementNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitArgumentsExpression(JavaScriptParser.ArgumentsExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSourceElement(JavaScriptParser.SourceElementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMultiplicativeExpression(JavaScriptParser.MultiplicativeExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPreDecreaseExpression(JavaScriptParser.PreDecreaseExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitDeclaration(JavaScriptParser.DeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLabelledStatement(JavaScriptParser.LabelledStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFormalParameterArg(JavaScriptParser.FormalParameterArgContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPropertyShorthand(JavaScriptParser.PropertyShorthandContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterClassTail(JavaScriptParser.ClassTailContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImportFromBlock(JavaScriptParser.ImportFromBlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMemberDotExpression(JavaScriptParser.MemberDotExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExportDefaultDeclaration(JavaScriptParser.ExportDefaultDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExportModuleItems(JavaScriptParser.ExportModuleItemsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitVarModifier(JavaScriptParser.VarModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAssignable(JavaScriptParser.AssignableContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAdditiveExpression(JavaScriptParser.AdditiveExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitOptionalChainExpression(JavaScriptParser.OptionalChainExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterInExpression(JavaScriptParser.InExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterForStatement(JavaScriptParser.ForStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPowerExpression(JavaScriptParser.PowerExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLet_(JavaScriptParser.Let_Context ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPowerExpression(JavaScriptParser.PowerExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterEqualityExpression(JavaScriptParser.EqualityExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFormalParameterArg(JavaScriptParser.FormalParameterArgContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitStatementList(JavaScriptParser.StatementListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitBitXOrExpression(JavaScriptParser.BitXOrExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPostDecreaseExpression(JavaScriptParser.PostDecreaseExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterCaseClause(JavaScriptParser.CaseClauseContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFieldDefinition(JavaScriptParser.FieldDefinitionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterVarModifier(JavaScriptParser.VarModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFieldDefinition(JavaScriptParser.FieldDefinitionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMemberIndexExpression(JavaScriptParser.MemberIndexExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterStatementList(JavaScriptParser.StatementListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImportStatement(JavaScriptParser.ImportStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterClassElementName(JavaScriptParser.ClassElementNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAnonymousFunctionDecl(JavaScriptParser.AnonymousFunctionDeclContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterDoStatement(JavaScriptParser.DoStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitArguments(JavaScriptParser.ArgumentsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSetter(JavaScriptParser.SetterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPropertyExpressionAssignment(JavaScriptParser.PropertyExpressionAssignmentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLogicalAndExpression(JavaScriptParser.LogicalAndExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMetaExpression(JavaScriptParser.MetaExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterCoalesceExpression(JavaScriptParser.CoalesceExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitDeleteExpression(JavaScriptParser.DeleteExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAssignmentExpression(JavaScriptParser.AssignmentExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterThisExpression(JavaScriptParser.ThisExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterDeleteExpression(JavaScriptParser.DeleteExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExportFromBlock(JavaScriptParser.ExportFromBlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitReservedWord(JavaScriptParser.ReservedWordContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSourceElements(JavaScriptParser.SourceElementsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterVoidExpression(JavaScriptParser.VoidExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitInExpression(JavaScriptParser.InExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitThisExpression(JavaScriptParser.ThisExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMultiplicativeExpression(JavaScriptParser.MultiplicativeExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterRelationalExpression(JavaScriptParser.RelationalExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitNewExpression(JavaScriptParser.NewExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterArgumentsExpression(JavaScriptParser.ArgumentsExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFormalParameterList(JavaScriptParser.FormalParameterListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSuperExpression(JavaScriptParser.SuperExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFinallyProduction(JavaScriptParser.FinallyProductionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterArrayLiteralExpression(JavaScriptParser.ArrayLiteralExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterReservedWord(JavaScriptParser.ReservedWordContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitMetaExpression(JavaScriptParser.MetaExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTryStatement(JavaScriptParser.TryStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterGetter(JavaScriptParser.GetterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTypeofExpression(JavaScriptParser.TypeofExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSuperExpression(JavaScriptParser.SuperExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFunctionBody(JavaScriptParser.FunctionBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFunctionProperty(JavaScriptParser.FunctionPropertyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitEos(JavaScriptParser.EosContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterForOfStatement(JavaScriptParser.ForOfStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImportStatement(JavaScriptParser.ImportStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAssignmentExpression(JavaScriptParser.AssignmentExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAliasName(JavaScriptParser.AliasNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitArrowFunctionBody(JavaScriptParser.ArrowFunctionBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitClassElement(JavaScriptParser.ClassElementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitBigintLiteral(JavaScriptParser.BigintLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitForOfStatement(JavaScriptParser.ForOfStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterBlock(JavaScriptParser.BlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFunctionBody(JavaScriptParser.FunctionBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSwitchStatement(JavaScriptParser.SwitchStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterOptionalChainExpression(JavaScriptParser.OptionalChainExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterWithStatement(JavaScriptParser.WithStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterIfStatement(JavaScriptParser.IfStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPreIncrementExpression(JavaScriptParser.PreIncrementExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterParenthesizedExpression(JavaScriptParser.ParenthesizedExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitClassExpression(JavaScriptParser.ClassExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMemberIndexExpression(JavaScriptParser.MemberIndexExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterBitNotExpression(JavaScriptParser.BitNotExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterBitAndExpression(JavaScriptParser.BitAndExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitGetter(JavaScriptParser.GetterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterSetter(JavaScriptParser.SetterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAnonymousFunctionDecl(JavaScriptParser.AnonymousFunctionDeclContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPropertyGetter(JavaScriptParser.PropertyGetterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitIfStatement(JavaScriptParser.IfStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterComputedPropertyExpressionAssignment(JavaScriptParser.ComputedPropertyExpressionAssignmentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterArgument(JavaScriptParser.ArgumentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitObjectLiteral(JavaScriptParser.ObjectLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImportAliasName(JavaScriptParser.ImportAliasNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExpressionSequence(JavaScriptParser.ExpressionSequenceContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLastFormalParameterArg(JavaScriptParser.LastFormalParameterArgContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterObjectLiteral(JavaScriptParser.ObjectLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void visitErrorNode(ErrorNode node)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTemplateStringExpression(JavaScriptParser.TemplateStringExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTryStatement(JavaScriptParser.TryStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFunctionProperty(JavaScriptParser.FunctionPropertyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterInitializer(JavaScriptParser.InitializerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImportAliasName(JavaScriptParser.ImportAliasNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterUnaryPlusExpression(JavaScriptParser.UnaryPlusExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSourceElements(JavaScriptParser.SourceElementsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitComputedPropertyExpressionAssignment(JavaScriptParser.ComputedPropertyExpressionAssignmentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterDebuggerStatement(JavaScriptParser.DebuggerStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterArrowFunctionBody(JavaScriptParser.ArrowFunctionBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterWhileStatement(JavaScriptParser.WhileStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitWithStatement(JavaScriptParser.WithStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitUnaryPlusExpression(JavaScriptParser.UnaryPlusExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitBitOrExpression(JavaScriptParser.BitOrExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterBigintLiteral(JavaScriptParser.BigintLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAliasName(JavaScriptParser.AliasNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitVariableStatement(JavaScriptParser.VariableStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitSwitchStatement(JavaScriptParser.SwitchStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitClassTail(JavaScriptParser.ClassTailContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLiteralExpression(JavaScriptParser.LiteralExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitVoidExpression(JavaScriptParser.VoidExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitIdentifierExpression(JavaScriptParser.IdentifierExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterNewExpression(JavaScriptParser.NewExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitParenthesizedExpression(JavaScriptParser.ParenthesizedExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitEveryRule(ParserRuleContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPrivateIdentifier(JavaScriptParser.PrivateIdentifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAssignmentOperatorExpression(JavaScriptParser.AssignmentOperatorExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterBitXOrExpression(JavaScriptParser.BitXOrExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitEqualityExpression(JavaScriptParser.EqualityExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitKeyword(JavaScriptParser.KeywordContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitCoalesceExpression(JavaScriptParser.CoalesceExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImportedBinding(JavaScriptParser.ImportedBindingContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterEos(JavaScriptParser.EosContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitModuleExportName(JavaScriptParser.ModuleExportNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPropertyName(JavaScriptParser.PropertyNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTemplateStringLiteral(JavaScriptParser.TemplateStringLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLet_(JavaScriptParser.Let_Context ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImportedBinding(JavaScriptParser.ImportedBindingContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFunctionExpression(JavaScriptParser.FunctionExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTernaryExpression(JavaScriptParser.TernaryExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterElementList(JavaScriptParser.ElementListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitDebuggerStatement(JavaScriptParser.DebuggerStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExportFromBlock(JavaScriptParser.ExportFromBlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImportFrom(JavaScriptParser.ImportFromContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterVariableStatement(JavaScriptParser.VariableStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLiteral(JavaScriptParser.LiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitRelationalExpression(JavaScriptParser.RelationalExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void visitTerminal(TerminalNode node)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitIdentifierName(JavaScriptParser.IdentifierNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAdditiveExpression(JavaScriptParser.AdditiveExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLogicalAndExpression(JavaScriptParser.LogicalAndExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterMethodDefinition(JavaScriptParser.MethodDefinitionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitYieldExpression(JavaScriptParser.YieldExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitElementList(JavaScriptParser.ElementListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterAwaitExpression(JavaScriptParser.AwaitExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImportNamespace(JavaScriptParser.ImportNamespaceContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterArrowFunction(JavaScriptParser.ArrowFunctionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitNamedFunction(JavaScriptParser.NamedFunctionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitProgram(JavaScriptParser.ProgramContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImportExpression(JavaScriptParser.ImportExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitCaseBlock(JavaScriptParser.CaseBlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAwaitExpression(JavaScriptParser.AwaitExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExpressionStatement(JavaScriptParser.ExpressionStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterKeyword(JavaScriptParser.KeywordContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterDeclaration(JavaScriptParser.DeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitNumericLiteral(JavaScriptParser.NumericLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterEmptyStatement_(JavaScriptParser.EmptyStatement_Context ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterNamedFunction(JavaScriptParser.NamedFunctionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitForStatement(JavaScriptParser.ForStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitArrayElement(JavaScriptParser.ArrayElementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitStatement(JavaScriptParser.StatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterYieldStatement(JavaScriptParser.YieldStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitEmptyStatement_(JavaScriptParser.EmptyStatement_Context ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterClassDeclaration(JavaScriptParser.ClassDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitInstanceofExpression(JavaScriptParser.InstanceofExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLogicalOrExpression(JavaScriptParser.LogicalOrExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterIdentifier(JavaScriptParser.IdentifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExportDeclaration(JavaScriptParser.ExportDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTemplateStringAtom(JavaScriptParser.TemplateStringAtomContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitExpressionStatement(JavaScriptParser.ExpressionStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterForInStatement(JavaScriptParser.ForInStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitAssignmentOperator(JavaScriptParser.AssignmentOperatorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterTernaryExpression(JavaScriptParser.TernaryExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterArrayElement(JavaScriptParser.ArrayElementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImportModuleItems(JavaScriptParser.ImportModuleItemsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterThrowStatement(JavaScriptParser.ThrowStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFunctionDeclaration(JavaScriptParser.FunctionDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLastFormalParameterArg(JavaScriptParser.LastFormalParameterArgContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExportModuleItems(JavaScriptParser.ExportModuleItemsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterLabelledStatement(JavaScriptParser.LabelledStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTemplateStringAtom(JavaScriptParser.TemplateStringAtomContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterBreakStatement(JavaScriptParser.BreakStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterYieldExpression(JavaScriptParser.YieldExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExportDefaultDeclaration(JavaScriptParser.ExportDefaultDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterCatchProduction(JavaScriptParser.CatchProductionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPrivateIdentifier(JavaScriptParser.PrivateIdentifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPreDecreaseExpression(JavaScriptParser.PreDecreaseExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterBitShiftExpression(JavaScriptParser.BitShiftExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitImportExpression(JavaScriptParser.ImportExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterProgram(JavaScriptParser.ProgramContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterIdentifierExpression(JavaScriptParser.IdentifierExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterReturnStatement(JavaScriptParser.ReturnStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitFunctionDeclaration(JavaScriptParser.FunctionDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterInstanceofExpression(JavaScriptParser.InstanceofExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitArrayLiteral(JavaScriptParser.ArrayLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPropertySetter(JavaScriptParser.PropertySetterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPropertySetter(JavaScriptParser.PropertySetterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitForInStatement(JavaScriptParser.ForInStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitTemplateStringExpression(JavaScriptParser.TemplateStringExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPreIncrementExpression(JavaScriptParser.PreIncrementExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterNumericLiteral(JavaScriptParser.NumericLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitReturnStatement(JavaScriptParser.ReturnStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterExportDeclaration(JavaScriptParser.ExportDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterEveryRule(ParserRuleContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImportModuleItems(JavaScriptParser.ImportModuleItemsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitArrayLiteralExpression(JavaScriptParser.ArrayLiteralExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterBitOrExpression(JavaScriptParser.BitOrExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitPropertyExpressionAssignment(JavaScriptParser.PropertyExpressionAssignmentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitInitializer(JavaScriptParser.InitializerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitDoStatement(JavaScriptParser.DoStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLiteral(JavaScriptParser.LiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterPostDecreaseExpression(JavaScriptParser.PostDecreaseExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterContinueStatement(JavaScriptParser.ContinueStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterUnaryMinusExpression(JavaScriptParser.UnaryMinusExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterImportNamespace(JavaScriptParser.ImportNamespaceContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterArrayLiteral(JavaScriptParser.ArrayLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitLiteralExpression(JavaScriptParser.LiteralExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitCaseClause(JavaScriptParser.CaseClauseContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitArrowFunction(JavaScriptParser.ArrowFunctionContext ctx)",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "JavaScriptChurn.java",
                "methods": [
                    {
                        "methodName": "void enterMethodDefinition(JavaScriptParser.MethodDefinitionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<MethodRange> parseMethods(String fileContent)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFunctionDeclaration(JavaScriptParser.FunctionDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFunctionExpression(JavaScriptParser.FunctionExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String getParameters(JavaScriptParser.FormalParameterListContext ctx)",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "JSONReflectUtil.java",
                "methods": [{
                    "methodName": "void reflect(JSONObject jsonObject)",
                    "modifications": 1
                }]
            },
            {
                "filePath": "Python3Lexer.java",
                "methods": [
                    {
                        "methodName": "String getGrammarFileName()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getModeNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String getSerializedATN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ATN getATN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void OPEN_BRACE_action(RuleContext _localctx, int actionIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] makeRuleNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] makeSymbolicNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getTokenNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getChannelNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void CLOSE_BRACK_action(RuleContext _localctx, int actionIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getRuleNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void OPEN_PAREN_action(RuleContext _localctx, int actionIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Vocabulary getVocabulary()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean NEWLINE_sempred(RuleContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void NEWLINE_action(RuleContext _localctx, int actionIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void OPEN_BRACK_action(RuleContext _localctx, int actionIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void CLOSE_BRACE_action(RuleContext _localctx, int actionIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void action(RuleContext _localctx, int ruleIndex, int actionIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] makeLiteralNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void CLOSE_PAREN_action(RuleContext _localctx, int actionIndex)",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "CommitFrequency.java",
                "methods": [
                    {
                        "methodName": "Map<LocalDate,Integer> returnResult()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void analyze(Repository repository)",
                        "modifications": 1
                    },
                    {
                        "methodName": "JSONObject returnJSONResult()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String toString()",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "GitMetricAnalyzer.java",
                "methods": []
            },
            {
                "filePath": "example.js",
                "methods": [
                    {
                        "methodName": "addTrick(trick)",
                        "modifications": 1
                    },
                    {
                        "methodName": "constructor(name, age, species, hasFur, warmBlooded)",
                        "modifications": 1
                    },
                    {
                        "methodName": "calculateMassIndex()",
                        "modifications": 1
                    },
                    {
                        "methodName": "constructor(name, age, species, breed)",
                        "modifications": 2
                    },
                    {
                        "methodName": "speak()",
                        "modifications": 5
                    },
                    {
                        "methodName": "longMethod()",
                        "modifications": 1
                    },
                    {
                        "methodName": "constructor(name, age, species, isIndependent, color)",
                        "modifications": 1
                    },
                    {
                        "methodName": "excessivelyComplexMethod()",
                        "modifications": 1
                    },
                    {
                        "methodName": "constructor(name, age, species)",
                        "modifications": 1
                    },
                    {
                        "methodName": "constructor(name, age, species, tuskLength, trunkLength, earSize)",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "CommitFixRevert.java",
                "methods": [
                    {
                        "methodName": "List<RevCommit> returnResult()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void analyze(Repository repository)",
                        "modifications": 1
                    },
                    {
                        "methodName": "JSONObject returnJSONResult()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String toString()",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "GitMetricFactory.java",
                "methods": [{
                    "methodName": "GitMetricAnalyzer<?> getMetric(GitMetricEnum metric, int depth)",
                    "modifications": 2
                }]
            },
            {
                "filePath": "GitMetricAnalyzerBuilder.java",
                "methods": [
                    {
                        "methodName": "void analyze(Repository repository)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void writeResultsToFile(JSONObject res)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void addMetric(GitMetricAnalyzer<?> analyzer)",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "JavaScriptParser.java",
                "methods": [
                    {
                        "methodName": "TerminalNode NotEquals()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Return()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode HexIntegerLiteral()",
                        "modifications": 1
                    },
                    {
                        "methodName": "VariableDeclarationContext variableDeclaration(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Export()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode Power()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode SemiColon()",
                        "modifications": 2
                    },
                    {
                        "methodName": "StatementListContext statementList()",
                        "modifications": 4
                    },
                    {
                        "methodName": "ImportAliasNameContext importAliasName(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "ProgramContext program()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode From()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode QuestionMark()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Equals_()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Modulus()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Comma()",
                        "modifications": 1
                    },
                    {
                        "methodName": "SourceElementsContext sourceElements()",
                        "modifications": 3
                    },
                    {
                        "methodName": "VarModifierContext varModifier()",
                        "modifications": 2
                    },
                    {
                        "methodName": "DebuggerStatementContext debuggerStatement()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Case()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode PlusPlus()",
                        "modifications": 2
                    },
                    {
                        "methodName": "FunctionBodyContext functionBody()",
                        "modifications": 8
                    },
                    {
                        "methodName": "ArrayLiteralContext arrayLiteral()",
                        "modifications": 3
                    },
                    {
                        "methodName": "void copyFrom(IterationStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<FormalParameterArgContext> formalParameterArg()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ArgumentsContext arguments()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode Minus()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode GreaterThanEquals()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Import()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode Instanceof()",
                        "modifications": 2
                    },
                    {
                        "methodName": "AliasNameContext aliasName()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ImportModuleItemsContext importModuleItems()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode As()",
                        "modifications": 6
                    },
                    {
                        "methodName": "boolean throwStatement_sempred(ThrowStatementContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode LeftShiftArithmeticAssign()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Throw()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode MinusMinus()",
                        "modifications": 2
                    },
                    {
                        "methodName": "T accept(ParseTreeVisitor<?extendsT> visitor)",
                        "modifications": 144
                    },
                    {
                        "methodName": "ModuleExportNameContext moduleExportName(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode RightShiftArithmetic()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode MinusAssign()",
                        "modifications": 1
                    },
                    {
                        "methodName": "FormalParameterListContext formalParameterList()",
                        "modifications": 6
                    },
                    {
                        "methodName": "String[] makeSymbolicNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode OctalIntegerLiteral()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode EOF()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Async()",
                        "modifications": 7
                    },
                    {
                        "methodName": "TerminalNode Void()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ExportFromBlockContext exportFromBlock()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<ClassElementContext> classElement()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean returnStatement_sempred(ReturnStatementContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "ArgumentContext argument(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Not()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] makeLiteralNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void copyFrom(ExportStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Try()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Else()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ClassTailContext classTail()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode With()",
                        "modifications": 2
                    },
                    {
                        "methodName": "DefaultClauseContext defaultClause()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Interface()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode RightShiftLogicalAssign()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<CaseClausesContext> caseClauses()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void copyFrom(AnonymousFunctionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "CaseClausesContext caseClauses()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Break()",
                        "modifications": 2
                    },
                    {
                        "methodName": "LiteralContext literal()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Enum()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Continue()",
                        "modifications": 2
                    },
                    {
                        "methodName": "InitializerContext initializer()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ExpressionSequenceContext expressionSequence(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "CatchProductionContext catchProduction()",
                        "modifications": 2
                    },
                    {
                        "methodName": "String getGrammarFileName()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Let_Context let_()",
                        "modifications": 3
                    },
                    {
                        "methodName": "String getSerializedATN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode BooleanLiteral()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode QuestionMarkDot()",
                        "modifications": 2
                    },
                    {
                        "methodName": "int getRuleIndex()",
                        "modifications": 86
                    },
                    {
                        "methodName": "TerminalNode Function_()",
                        "modifications": 3
                    },
                    {
                        "methodName": "List<TerminalNode> BackTick()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode StrictLet()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode OpenParen()",
                        "modifications": 19
                    },
                    {
                        "methodName": "List<PropertyAssignmentContext> propertyAssignment()",
                        "modifications": 1
                    },
                    {
                        "methodName": "Vocabulary getVocabulary()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ExportModuleItemsContext exportModuleItems()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Default()",
                        "modifications": 4
                    },
                    {
                        "methodName": "IdentifierNameContext identifierName(int i)",
                        "modifications": 2
                    },
                    {
                        "methodName": "TemplateStringAtomContext templateStringAtom(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode While()",
                        "modifications": 3
                    },
                    {
                        "methodName": "ClassElementContext classElement(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getTokenNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode StringLiteral()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode Dot()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<SourceElementContext> sourceElement()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode NullCoalesce()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Public()",
                        "modifications": 1
                    },
                    {
                        "methodName": "AssignableContext assignable()",
                        "modifications": 4
                    },
                    {
                        "methodName": "TerminalNode Or()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean yieldStatement_sempred(YieldStatementContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "CaseBlockContext caseBlock()",
                        "modifications": 2
                    },
                    {
                        "methodName": "IdentifierContext identifier()",
                        "modifications": 16
                    },
                    {
                        "methodName": "TerminalNode Assign()",
                        "modifications": 4
                    },
                    {
                        "methodName": "String[] makeRuleNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ClassElementNameContext classElementName()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode This()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode CloseBrace()",
                        "modifications": 7
                    },
                    {
                        "methodName": "SetterContext setter()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode Switch()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ReservedWordContext reservedWord()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode BigDecimalIntegerLiteral()",
                        "modifications": 1
                    },
                    {
                        "methodName": "PrivateIdentifierContext privateIdentifier()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Comma(int i)",
                        "modifications": 8
                    },
                    {
                        "methodName": "ContinueStatementContext continueStatement()",
                        "modifications": 2
                    },
                    {
                        "methodName": "void copyFrom(SingleExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean continueStatement_sempred(ContinueStatementContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode BinaryIntegerLiteral()",
                        "modifications": 1
                    },
                    {
                        "methodName": "EmptyStatement_Context emptyStatement_()",
                        "modifications": 3
                    },
                    {
                        "methodName": "boolean singleExpression_sempred(SingleExpressionContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode MultiplyAssign()",
                        "modifications": 1
                    },
                    {
                        "methodName": "KeywordContext keyword()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TemplateStringLiteralContext templateStringLiteral()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode Catch()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Identifier()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ElementListContext elementList()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<TemplateStringAtomContext> templateStringAtom()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ATN getATN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void exitRule(ParseTreeListener listener)",
                        "modifications": 144
                    },
                    {
                        "methodName": "TerminalNode NullishCoalescingAssign()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode HashBangLine()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ImportStatementContext importStatement()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Divide()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Implements()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<ArrayElementContext> arrayElement()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode OpenBrace()",
                        "modifications": 7
                    },
                    {
                        "methodName": "ExportAliasNameContext exportAliasName(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode OpenBracket()",
                        "modifications": 4
                    },
                    {
                        "methodName": "ArrayElementContext arrayElement()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode BitXorAssign()",
                        "modifications": 1
                    },
                    {
                        "methodName": "StatementContext statement()",
                        "modifications": 9
                    },
                    {
                        "methodName": "IfStatementContext ifStatement()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode LeftShiftArithmetic()",
                        "modifications": 1
                    },
                    {
                        "methodName": "IdentifierNameContext identifierName()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode YieldStar()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode CloseBracket()",
                        "modifications": 4
                    },
                    {
                        "methodName": "TerminalNode LessThan()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ImportNamespaceContext importNamespace()",
                        "modifications": 3
                    },
                    {
                        "methodName": "CaseClauseContext caseClause(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean classElement_sempred(ClassElementContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "FormalParameterArgContext formalParameterArg(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "NumericLiteralContext numericLiteral()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode TemplateCloseBrace()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean methodDefinition_sempred(MethodDefinitionContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "SingleExpressionContext singleExpression()",
                        "modifications": 34
                    },
                    {
                        "methodName": "StatementContext statement(int i)",
                        "modifications": 2
                    },
                    {
                        "methodName": "SourceElementContext sourceElement()",
                        "modifications": 1
                    },
                    {
                        "methodName": "VariableDeclarationContext variableDeclaration()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Protected()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Const()",
                        "modifications": 2
                    },
                    {
                        "methodName": "VariableDeclarationListContext variableDeclarationList()",
                        "modifications": 5
                    },
                    {
                        "methodName": "ImportDefaultContext importDefault()",
                        "modifications": 2
                    },
                    {
                        "methodName": "PropertyAssignmentContext propertyAssignment(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode BitAndAssign()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ExpressionSequenceContext expressionSequence()",
                        "modifications": 15
                    },
                    {
                        "methodName": "List<StatementContext> statement()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ArrowFunctionParametersContext arrowFunctionParameters()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Package()",
                        "modifications": 1
                    },
                    {
                        "methodName": "CaseClausesContext caseClauses(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode RightShiftArithmeticAssign()",
                        "modifications": 1
                    },
                    {
                        "methodName": "BigintLiteralContext bigintLiteral()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode LessThanEquals()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getRuleNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ReturnStatementContext returnStatement()",
                        "modifications": 2
                    },
                    {
                        "methodName": "CaseClauseContext caseClause()",
                        "modifications": 1
                    },
                    {
                        "methodName": "FieldDefinitionContext fieldDefinition()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Debugger()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode BitAnd()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode TemplateStringStartExpression()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode MoreThan()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode For()",
                        "modifications": 4
                    },
                    {
                        "methodName": "TerminalNode IdentityNotEquals()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "ImportFromBlockContext importFromBlock()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Await()",
                        "modifications": 4
                    },
                    {
                        "methodName": "TerminalNode Static()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode OctalIntegerLiteral2()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean eos_sempred(EosContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<IdentifierNameContext> identifierName()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode DivideAssign()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ImportFromContext importFrom()",
                        "modifications": 3
                    },
                    {
                        "methodName": "boolean breakStatement_sempred(BreakStatementContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "FormalParameterArgContext formalParameterArg()",
                        "modifications": 2
                    },
                    {
                        "methodName": "SingleExpressionContext singleExpression(int i)",
                        "modifications": 20
                    },
                    {
                        "methodName": "TerminalNode Private()",
                        "modifications": 1
                    },
                    {
                        "methodName": "DeclarationContext declaration()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Ellipsis()",
                        "modifications": 4
                    },
                    {
                        "methodName": "TerminalNode BitOr()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Multiply()",
                        "modifications": 6
                    },
                    {
                        "methodName": "TerminalNode Plus()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode BigBinaryIntegerLiteral()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode TemplateStringAtom()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode ARROW()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Hashtag()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode CloseParen()",
                        "modifications": 19
                    },
                    {
                        "methodName": "List<ExportAliasNameContext> exportAliasName()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean setter_sempred(SetterContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "IterationStatementContext iterationStatement()",
                        "modifications": 2
                    },
                    {
                        "methodName": "EosContext eos()",
                        "modifications": 14
                    },
                    {
                        "methodName": "VariableStatementContext variableStatement()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode RegularExpressionLiteral()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ObjectLiteralContext objectLiteral()",
                        "modifications": 3
                    },
                    {
                        "methodName": "List<ImportAliasNameContext> importAliasName()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode IdentityEquals()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Of()",
                        "modifications": 3
                    },
                    {
                        "methodName": "PropertyAssignmentContext propertyAssignment()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ClassElementContext classElement()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode PowerAssign()",
                        "modifications": 1
                    },
                    {
                        "methodName": "AssignmentOperatorContext assignmentOperator()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode BitOrAssign()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode NullLiteral()",
                        "modifications": 2
                    },
                    {
                        "methodName": "SourceElementContext sourceElement(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Finally()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode BackTick(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "ArgumentContext argument()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode BigHexIntegerLiteral()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode And()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode BitNot()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ExpressionStatementContext expressionStatement()",
                        "modifications": 2
                    },
                    {
                        "methodName": "WithStatementContext withStatement()",
                        "modifications": 2
                    },
                    {
                        "methodName": "LabelledStatementContext labelledStatement()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode BigOctalIntegerLiteral()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode BitXOr()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ArrowFunctionBodyContext arrowFunctionBody()",
                        "modifications": 2
                    },
                    {
                        "methodName": "void enterRule(ParseTreeListener listener)",
                        "modifications": 144
                    },
                    {
                        "methodName": "TerminalNode NonStrictLet()",
                        "modifications": 2
                    },
                    {
                        "methodName": "boolean getter_sempred(GetterContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Delete()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Class()",
                        "modifications": 3
                    },
                    {
                        "methodName": "ExportStatementContext exportStatement()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<ExpressionSequenceContext> expressionSequence()",
                        "modifications": 1
                    },
                    {
                        "methodName": "PropertyNameContext propertyName()",
                        "modifications": 5
                    },
                    {
                        "methodName": "TerminalNode PlusAssign()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Extends()",
                        "modifications": 2
                    },
                    {
                        "methodName": "MethodDefinitionContext methodDefinition()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode RightShiftLogical()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Do()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ImportAliasNameContext importAliasName()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void copyFrom(PropertyAssignmentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "LastFormalParameterArgContext lastFormalParameterArg()",
                        "modifications": 2
                    },
                    {
                        "methodName": "AnonymousFunctionContext anonymousFunction()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode SemiColon(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode Var()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ImportedBindingContext importedBinding()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<SingleExpressionContext> singleExpression()",
                        "modifications": 20
                    },
                    {
                        "methodName": "List<ModuleExportNameContext> moduleExportName()",
                        "modifications": 1
                    },
                    {
                        "methodName": "GetterContext getter()",
                        "modifications": 3
                    },
                    {
                        "methodName": "boolean expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode ModulusAssign()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<TerminalNode> SemiColon()",
                        "modifications": 1
                    },
                    {
                        "methodName": "FinallyProductionContext finallyProduction()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<TerminalNode> Comma()",
                        "modifications": 8
                    },
                    {
                        "methodName": "BlockContext block()",
                        "modifications": 6
                    },
                    {
                        "methodName": "ModuleExportNameContext moduleExportName()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<CaseClauseContext> caseClause()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode New()",
                        "modifications": 3
                    },
                    {
                        "methodName": "BreakStatementContext breakStatement()",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<VariableDeclarationContext> variableDeclaration()",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<ArgumentContext> argument()",
                        "modifications": 1
                    },
                    {
                        "methodName": "TemplateStringAtomContext templateStringAtom()",
                        "modifications": 1
                    },
                    {
                        "methodName": "YieldStatementContext yieldStatement()",
                        "modifications": 3
                    },
                    {
                        "methodName": "ArrayElementContext arrayElement(int i)",
                        "modifications": 1
                    },
                    {
                        "methodName": "TerminalNode In()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode Colon()",
                        "modifications": 6
                    },
                    {
                        "methodName": "TerminalNode DecimalLiteral()",
                        "modifications": 1
                    },
                    {
                        "methodName": "SingleExpressionContext singleExpression(int _p)",
                        "modifications": 1
                    },
                    {
                        "methodName": "FunctionDeclarationContext functionDeclaration()",
                        "modifications": 4
                    },
                    {
                        "methodName": "TerminalNode Yield()",
                        "modifications": 4
                    },
                    {
                        "methodName": "TerminalNode If()",
                        "modifications": 2
                    },
                    {
                        "methodName": "SwitchStatementContext switchStatement()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TerminalNode Typeof()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ExportAliasNameContext exportAliasName()",
                        "modifications": 1
                    },
                    {
                        "methodName": "ClassDeclarationContext classDeclaration()",
                        "modifications": 3
                    },
                    {
                        "methodName": "TerminalNode Super()",
                        "modifications": 2
                    },
                    {
                        "methodName": "ThrowStatementContext throwStatement()",
                        "modifications": 2
                    },
                    {
                        "methodName": "TryStatementContext tryStatement()",
                        "modifications": 2
                    }
                ]
            },
            {
                "filePath": "PythonChurn.java",
                "methods": [
                    {
                        "methodName": "List<MethodRange> parseMethods(String fileContent)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void enterFuncdef(Python3Parser.FuncdefContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String getParameters(Python3Parser.ParametersContext ctx)",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "JavaScriptLexer.java",
                "methods": [
                    {
                        "methodName": "String getGrammarFileName()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getModeNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean TemplateCloseBrace_sempred(RuleContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean Private_sempred(RuleContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String getSerializedATN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean OctalIntegerLiteral_sempred(RuleContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "ATN getATN()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean RegularExpressionLiteral_sempred(RuleContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] makeRuleNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] makeSymbolicNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void TemplateCloseBrace_action(RuleContext _localctx, int actionIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean StrictLet_sempred(RuleContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getChannelNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean Static_sempred(RuleContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getRuleNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean HashBangLine_sempred(RuleContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "Vocabulary getVocabulary()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean NonStrictLet_sempred(RuleContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void StringLiteral_action(RuleContext _localctx, int actionIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean Protected_sempred(RuleContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] makeLiteralNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean Package_sempred(RuleContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean Interface_sempred(RuleContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "String[] getTokenNames()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void CloseBrace_action(RuleContext _localctx, int actionIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean Implements_sempred(RuleContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void TemplateStringStartExpression_action(RuleContext _localctx, int actionIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void OpenBrace_action(RuleContext _localctx, int actionIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "boolean Public_sempred(RuleContext _localctx, int predIndex)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void action(RuleContext _localctx, int ruleIndex, int actionIndex)",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "JavaChurn.java",
                "methods": [
                    {
                        "methodName": "List<MethodRange> parseMethods(String fileContent)",
                        "modifications": 2
                    },
                    {
                        "methodName": "void enterMethodDeclaration(JavaParser.MethodDeclarationContext ctx)",
                        "modifications": 2
                    },
                    {
                        "methodName": "List<String> extractParameters(JavaParser.FormalParametersContext formalParametersContext)",
                        "modifications": 1
                    },
                    {
                        "methodName": "List<String> getParameters(JavaParser.FormalParametersContext formalParametersContext)",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "CommitSize.java",
                "methods": [
                    {
                        "methodName": "Pair<Integer,Integer> returnResult()",
                        "modifications": 1
                    },
                    {
                        "methodName": "void analyzeCommitDiff(Repository repository, RevCommit parent, RevCommit commit)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void analyze(Repository repository)",
                        "modifications": 1
                    },
                    {
                        "methodName": "AbstractTreeIterator prepareTreeParser(Repository repository, RevCommit commit)",
                        "modifications": 1
                    },
                    {
                        "methodName": "JSONObject returnJSONResult()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String toString()",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "JavaScriptParserBaseVisitor.java",
                "methods": [
                    {
                        "methodName": "T visitEmptyStatement_(JavaScriptParser.EmptyStatement_Context ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitInitializer(JavaScriptParser.InitializerContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitBlock(JavaScriptParser.BlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFieldDefinition(JavaScriptParser.FieldDefinitionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitClassTail(JavaScriptParser.ClassTailContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitKeyword(JavaScriptParser.KeywordContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitInExpression(JavaScriptParser.InExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitForStatement(JavaScriptParser.ForStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPowerExpression(JavaScriptParser.PowerExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAwaitExpression(JavaScriptParser.AwaitExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLastFormalParameterArg(JavaScriptParser.LastFormalParameterArgContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitArgument(JavaScriptParser.ArgumentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitNumericLiteral(JavaScriptParser.NumericLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitYieldExpression(JavaScriptParser.YieldExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImportNamespace(JavaScriptParser.ImportNamespaceContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTemplateStringAtom(JavaScriptParser.TemplateStringAtomContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitVariableDeclaration(JavaScriptParser.VariableDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitVariableStatement(JavaScriptParser.VariableStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImportExpression(JavaScriptParser.ImportExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTemplateStringExpression(JavaScriptParser.TemplateStringExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFormalParameterArg(JavaScriptParser.FormalParameterArgContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitEqualityExpression(JavaScriptParser.EqualityExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExportFromBlock(JavaScriptParser.ExportFromBlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPreDecreaseExpression(JavaScriptParser.PreDecreaseExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTemplateStringLiteral(JavaScriptParser.TemplateStringLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFormalParameterList(JavaScriptParser.FormalParameterListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitVariableDeclarationList(JavaScriptParser.VariableDeclarationListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitContinueStatement(JavaScriptParser.ContinueStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitForOfStatement(JavaScriptParser.ForOfStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitNotExpression(JavaScriptParser.NotExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitElementList(JavaScriptParser.ElementListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPropertyShorthand(JavaScriptParser.PropertyShorthandContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitArrayElement(JavaScriptParser.ArrayElementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImportFrom(JavaScriptParser.ImportFromContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitCaseClauses(JavaScriptParser.CaseClausesContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitNewExpression(JavaScriptParser.NewExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitProgram(JavaScriptParser.ProgramContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFunctionDeclaration(JavaScriptParser.FunctionDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitRelationalExpression(JavaScriptParser.RelationalExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMetaExpression(JavaScriptParser.MetaExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitWithStatement(JavaScriptParser.WithStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExportAliasName(JavaScriptParser.ExportAliasNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitForInStatement(JavaScriptParser.ForInStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitUnaryMinusExpression(JavaScriptParser.UnaryMinusExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitClassElement(JavaScriptParser.ClassElementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitArrayLiteral(JavaScriptParser.ArrayLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFunctionProperty(JavaScriptParser.FunctionPropertyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitBitNotExpression(JavaScriptParser.BitNotExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitReservedWord(JavaScriptParser.ReservedWordContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLiteral(JavaScriptParser.LiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLogicalAndExpression(JavaScriptParser.LogicalAndExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitBigintLiteral(JavaScriptParser.BigintLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitCatchProduction(JavaScriptParser.CatchProductionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitClassDeclaration(JavaScriptParser.ClassDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitBreakStatement(JavaScriptParser.BreakStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSourceElements(JavaScriptParser.SourceElementsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitGetter(JavaScriptParser.GetterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitBitXOrExpression(JavaScriptParser.BitXOrExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPropertyExpressionAssignment(JavaScriptParser.PropertyExpressionAssignmentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLiteralExpression(JavaScriptParser.LiteralExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAssignmentOperator(JavaScriptParser.AssignmentOperatorContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitDefaultClause(JavaScriptParser.DefaultClauseContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitCaseClause(JavaScriptParser.CaseClauseContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitIdentifierExpression(JavaScriptParser.IdentifierExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTryStatement(JavaScriptParser.TryStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFunctionBody(JavaScriptParser.FunctionBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitArrowFunctionBody(JavaScriptParser.ArrowFunctionBodyContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAnonymousFunctionDecl(JavaScriptParser.AnonymousFunctionDeclContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImportDefault(JavaScriptParser.ImportDefaultContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitBitShiftExpression(JavaScriptParser.BitShiftExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMethodDefinition(JavaScriptParser.MethodDefinitionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitObjectLiteral(JavaScriptParser.ObjectLiteralContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImportedBinding(JavaScriptParser.ImportedBindingContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitDeclaration(JavaScriptParser.DeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitVarModifier(JavaScriptParser.VarModifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImportAliasName(JavaScriptParser.ImportAliasNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitArrowFunction(JavaScriptParser.ArrowFunctionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitThrowStatement(JavaScriptParser.ThrowStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitArguments(JavaScriptParser.ArgumentsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTypeofExpression(JavaScriptParser.TypeofExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExportDefaultDeclaration(JavaScriptParser.ExportDefaultDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitIdentifier(JavaScriptParser.IdentifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMemberIndexExpression(JavaScriptParser.MemberIndexExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitEos(JavaScriptParser.EosContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitOptionalChainExpression(JavaScriptParser.OptionalChainExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSetter(JavaScriptParser.SetterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAssignmentExpression(JavaScriptParser.AssignmentExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSwitchStatement(JavaScriptParser.SwitchStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitIfStatement(JavaScriptParser.IfStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitComputedPropertyExpressionAssignment(JavaScriptParser.ComputedPropertyExpressionAssignmentContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImportFromBlock(JavaScriptParser.ImportFromBlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFunctionExpression(JavaScriptParser.FunctionExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImportModuleItems(JavaScriptParser.ImportModuleItemsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitStatement(JavaScriptParser.StatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitBitOrExpression(JavaScriptParser.BitOrExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitCaseBlock(JavaScriptParser.CaseBlockContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitStatementList(JavaScriptParser.StatementListContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLogicalOrExpression(JavaScriptParser.LogicalOrExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitInstanceofExpression(JavaScriptParser.InstanceofExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitIdentifierName(JavaScriptParser.IdentifierNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExpressionStatement(JavaScriptParser.ExpressionStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitBitAndExpression(JavaScriptParser.BitAndExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPostDecreaseExpression(JavaScriptParser.PostDecreaseExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitArrayLiteralExpression(JavaScriptParser.ArrayLiteralExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitNamedFunction(JavaScriptParser.NamedFunctionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitArgumentsExpression(JavaScriptParser.ArgumentsExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExportDeclaration(JavaScriptParser.ExportDeclarationContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitObjectLiteralExpression(JavaScriptParser.ObjectLiteralExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitYieldStatement(JavaScriptParser.YieldStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPostIncrementExpression(JavaScriptParser.PostIncrementExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitThisExpression(JavaScriptParser.ThisExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitWhileStatement(JavaScriptParser.WhileStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitArrowFunctionParameters(JavaScriptParser.ArrowFunctionParametersContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAliasName(JavaScriptParser.AliasNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSuperExpression(JavaScriptParser.SuperExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPreIncrementExpression(JavaScriptParser.PreIncrementExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMultiplicativeExpression(JavaScriptParser.MultiplicativeExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAdditiveExpression(JavaScriptParser.AdditiveExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPrivateIdentifier(JavaScriptParser.PrivateIdentifierContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAssignable(JavaScriptParser.AssignableContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPropertyGetter(JavaScriptParser.PropertyGetterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitFinallyProduction(JavaScriptParser.FinallyProductionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitParenthesizedExpression(JavaScriptParser.ParenthesizedExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPropertySetter(JavaScriptParser.PropertySetterContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitUnaryPlusExpression(JavaScriptParser.UnaryPlusExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLet_(JavaScriptParser.Let_Context ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitClassElementName(JavaScriptParser.ClassElementNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitModuleExportName(JavaScriptParser.ModuleExportNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitMemberDotExpression(JavaScriptParser.MemberDotExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitClassExpression(JavaScriptParser.ClassExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitDeleteExpression(JavaScriptParser.DeleteExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitTernaryExpression(JavaScriptParser.TernaryExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitCoalesceExpression(JavaScriptParser.CoalesceExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitSourceElement(JavaScriptParser.SourceElementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitLabelledStatement(JavaScriptParser.LabelledStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExportModuleItems(JavaScriptParser.ExportModuleItemsContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitAssignmentOperatorExpression(JavaScriptParser.AssignmentOperatorExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitVoidExpression(JavaScriptParser.VoidExpressionContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitDebuggerStatement(JavaScriptParser.DebuggerStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitDoStatement(JavaScriptParser.DoStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitReturnStatement(JavaScriptParser.ReturnStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitImportStatement(JavaScriptParser.ImportStatementContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitPropertyName(JavaScriptParser.PropertyNameContext ctx)",
                        "modifications": 1
                    },
                    {
                        "methodName": "T visitExpressionSequence(JavaScriptParser.ExpressionSequenceContext ctx)",
                        "modifications": 1
                    }
                ]
            },
            {
                "filePath": "Python3ParserListener.java",
                "methods": []
            },
            {
                "filePath": "BranchCountWithAuthors.java",
                "methods": [
                    {
                        "methodName": "String getBranchAuthor(Repository repository, Ref branch, Git git)",
                        "modifications": 1
                    },
                    {
                        "methodName": "int getCommitDepth(Repository repository, Ref branch)",
                        "modifications": 1
                    },
                    {
                        "methodName": "void analyze(Repository repository)",
                        "modifications": 2
                    },
                    {
                        "methodName": "String getBranchAuthor(Repository repository, Ref branch, RevWalk revWalk)",
                        "modifications": 1
                    },
                    {
                        "methodName": "JSONObject returnJSONResult()",
                        "modifications": 1
                    },
                    {
                        "methodName": "String toString()",
                        "modifications": 2
                    },
                    {
                        "methodName": "Map<String,List<BranchDetail>> returnResult()",
                        "modifications": 2
                    }
                ]
            },
            {
                "filePath": "JavascriptMethodLength.java",
                "methods": [{
                    "methodName": "void generateMetric(CodeAnalysisConfig.MetricConfig config, StringBuilder sbBuilder)",
                    "modifications": 1
                }]
            },
            {
                "filePath": "JavaScriptParserVisitor.java",
                "methods": []
            }
        ]}
    }
]}